import 'dart:convert';

import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:oktoast/oktoast.dart';
import 'package:vocabulary/tools/audio_play_tools.dart';
import 'package:vocabulary/tools/sharedPreferences_tools.dart';
import 'package:vocabulary/tools/sqlite_tools.dart';
import 'package:vocabulary/tools/permission_tools.dart';

import 'Page/home_page.dart';
import 'package:flutter_splash_screen/flutter_splash_screen.dart';

import 'tools/get_source_tools.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await DataUtils.init();
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {

  Future<void> init() async {
    await SqlTools.readAndWriteImage();
    await ApiDio.getNewMvId();
    await ApiDio.getNewMV();
    await ApiDio.getRandomMusic(2);
    hideScreen();
    ApiDio.getSheet();
    ApiDio.getHistory();
    ApiDio.getLove();
    ApiDio.getDownload();
    ApiDio.getMvHistory();
    AudioPlayerUtil.listPlayerHandle(musicModels: ApiDio.startList);
    //DeBugMessage.addMistake('这是一个错误信息示例');
  }

  @override
  void initState() {

    PermissionUtils.requestAllPermission();
    init();
    super.initState();
  }

  ///hide your splash screen
  Future<void> hideScreen() async {
    Future.delayed(Duration(microseconds: 88), () {
      FlutterSplashScreen.hide();
    });
  }

  @override
  Widget build(BuildContext context) {
    return OKToast(
      child: MaterialApp(
        title: 'Music',
        theme: ThemeData(
          useMaterial3: true,
          colorScheme: const ColorScheme.light(
            primary: Colors.blue,
            secondary: Colors.blue,
          ),
          textTheme: const TextTheme(
            displayLarge: TextStyle(
              fontSize: 72,
              fontWeight: FontWeight.bold,
            ),
          ),
          fontFamily: '黑体',
          scaffoldBackgroundColor: Colors.white,
          primaryColor: Colors.blue,
        ),
        home: HomePage(),
      ),
    );

  }
}

CommentModel commentModelFromJson(String str) => CommentModel.fromJson(json.decode(str));

String commentModelToJson(CommentModel data) => json.encode(data.toJson());

class CommentModel {
  User_ user;
  int commentId;
  String content;
  String timeStr;
  int likedCount;

  CommentModel({
    required this.user,
    required this.commentId,
    required this.content,
    required this.timeStr,
    required this.likedCount,
  });

  factory CommentModel.fromJson(Map<String, dynamic> json) => CommentModel(
    user: User_.fromJson(json["user"]),
    commentId: json["commentId"],
    content: json["content"],
    timeStr: (json["timeStr"]),
    likedCount: json["likedCount"],
  );

  Map<String, dynamic> toJson() => {
    "user": user.toJson(),
    "commentId": commentId,
    "content": content,
    "timeStr": timeStr,
    "likedCount": likedCount,
  };
}

class User_ {
  String avatarUrl;
  String nickname;

  User_({
    required this.avatarUrl,
    required this.nickname,
  });

  factory User_.fromJson(Map<String, dynamic> json) => User_(
    avatarUrl: json["avatarUrl"],
    nickname: json["nickname"],
  );

  Map<String, dynamic> toJson() => {
    "avatarUrl": avatarUrl,
    "nickname": nickname,
  };
}


HotModel hotModelFromJson(String str) => HotModel.fromJson(json.decode(str));

String hotModelToJson(HotModel data) => json.encode(data.toJson());

class HotModel {
  String searchWord;
  String? iconUrl; // 允许iconUrl为null

  HotModel({
    required this.searchWord,
    this.iconUrl, // 这里也要修改，允许iconUrl为空
  });

  factory HotModel.fromJson(Map<String, dynamic> json) => HotModel(
    searchWord: json["searchWord"],
    iconUrl: json["iconUrl"], // 从JSON中读取时，也可以是null
  );

  Map<String, dynamic> toJson() => {
    "searchWord": searchWord,
    "iconUrl": iconUrl, // 转换为JSON时，如果iconUrl为null，则JSON中也将包含null
  };
}



MusicModel musicFromJson(String str) => MusicModel.fromMap(json.decode(str));

String musicToJson(MusicModel data) => json.encode(data.toJson());

class MusicModel {
  int id;
  String name;
  String author;
  String? picUrl;
  String mp3Url;

  MusicModel({
    required this.id,
    required this.name,
    required this.author,
    required this.mp3Url,
    this.picUrl,
  });

  factory MusicModel.fromMap(Map<String, dynamic> json) => MusicModel(
    id: json["song_id"],
    name: json["name"]!,
    author: json["author"]!,
    picUrl: json["cover"]!,
    mp3Url: json["mp3url"]!,
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "name": name,
    "author": author,
    "picUrl": picUrl!,
    "mp3Url": mp3Url,
  };
}


MvModel newMvModelFromJson(String str) => MvModel.fromJson(json.decode(str));

String newMvModelToJson(MvModel data) => json.encode(data.toJson());

class MvModel {
  int id;
  String name;
  String artistName;
  String? desc; // 修改此处，允许desc为null
  String cover;
  DateTime publishTime;
  Map<String, String> brs;

  MvModel({
    required this.id,
    required this.name,
    required this.artistName,
    this.desc, // 修改此处，添加问号表示可以为空
    required this.cover,
    required this.publishTime,
    required this.brs,
  });

  factory MvModel.fromJson(Map<String, dynamic> json) => MvModel(
    id: json["id"],
    name: json["name"],
    artistName: json["artistName"],
    desc: json["desc"], // 修改此处，允许desc为null
    cover: json["cover"],
    publishTime: DateTime.parse(json["publishTime"]),
    brs: Map.from(json["brs"]).map((k, v) => MapEntry<String, String>(k, v)),
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "name": name,
    "artistName": artistName,
    "desc": desc, // 修改此处，允许desc为null
    "cover": cover,
    "publishTime": "${publishTime.year.toString().padLeft(4, '0')}-${publishTime.month.toString().padLeft(2, '0')}-${publishTime.day.toString().padLeft(2, '0')}",
    "brs": Map.from(brs).map((k, v) => MapEntry<String, dynamic>(k, v)),
  };
}

SearchModel searchModelFromJson(Map<String, dynamic> str) => SearchModel.fromJson(str);

String searchModelToJson(SearchModel data) => json.encode(data.toJson());

class SearchModel {
  int id;
  String name;
  List<Artist> artists;
  int duration;

  SearchModel({
    required this.id,
    required this.name,
    required this.artists,
    required this.duration,
  });

  factory SearchModel.fromJson(Map<String, dynamic> json) => SearchModel(
    id: json["id"],
    name: json["name"],
    artists: List<Artist>.from(json["artists"].map((x) => Artist.fromJson(x))),
    duration: json["duration"],
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "name": name,
    "artists": List<dynamic>.from(artists.map((x) => x.toJson())),
    "duration": duration,
  };
}

class Artist {
  int id;
  String name;

  Artist({
    required this.id,
    required this.name,
  });

  factory Artist.fromJson(Map<String, dynamic> json) => Artist(
    id: json["id"],
    name: json["name"],
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "name": name,
  };
}

class TempValue{
  // 记录播放UI的lock是open还是close，因为横竖屏会setState()
  static bool isLocked = false;
}


User userFromJson(String str) => User.fromJson(json.decode(str));

String userToJson(User data) => json.encode(data.toJson());

class User {
  String name;
  String email;
  String password;
  String time;
  String img;

  User({
    required this.name,
    required this.email,
    required this.password,
    required this.time,
    required this.img,
  });

  factory User.fromJson(Map<String, dynamic> json) => User(
      name: json["name"],
      email: json["email"],
      password: json["password"],
      time: json["time"],
      img: json["img"]
  );

  Map<String, dynamic> toJson() => {
    "name": name,
    "email": email,
    "password": password,
    "time": time,
    "img":img
  };
}

class MusicPlayer extends StatefulWidget {
  const MusicPlayer({super.key});

  @override
  _MusicPlayerState createState() => _MusicPlayerState();
}

class _MusicPlayerState extends State<MusicPlayer> {
  bool _playing = (AudioPlayerUtil.state == PlayerState.playing);
  String picUrl =
      'https://p3.music.126.net/YRFYXG6YaJfTyy_mQntS4A==/109951164799337803.jpg?param=300y300';
  String name = 'Happy';
  String author = '周杰伦';
  late MusicModel musicModel;

  late final ScrollController _scrollController;
  bool opened = false;

  String currentDuration = "00:00";
  bool isLove = false;

  void init() {
    isLove = SqlTools.isLoveMusic(musicModel.id.toString());
  }

  @override
  void initState() {
    musicModel = AudioPlayerUtil.musicModel!;
    ApiDio.getComment(musicModel.id.toString());
    init();
    super.initState();
    _scrollController = ScrollController();
    ApiDio.getWord(AudioPlayerUtil.musicModel!.id.toString());
    AudioPlayerUtil.statusListener(
        key: this,
        listener: (sate) {
          if (mounted) {
            setState(() {
              _playing = (AudioPlayerUtil.state == PlayerState.playing);
              ApiDio.getWord(AudioPlayerUtil.musicModel!.id.toString());
              musicModel = AudioPlayerUtil.musicModel!;
              name = AudioPlayerUtil.musicModel!.name.toString();
              author = AudioPlayerUtil.musicModel!.author.toString();
            });
          }
        });
    AudioPlayerUtil.positionListener(
        key: this,
        listener: (position) {
          setState(() {
            init();
            _playing = (AudioPlayerUtil.state == PlayerState.playing);
            currentDuration = _updateDuration(position);
            ApiDio.getWord(AudioPlayerUtil.musicModel!.id.toString());
            List<String> keys = ApiDio.lyricsMap.keys.toList(); // 将键转换为列表
            int index = keys.indexOf(currentDuration.toString()); // 找到键的索引
            if (index != -1) {
              scrollToIndex(index);
            }
          });
        });
  }

  String _updateDuration(int second) {
    int min = second ~/ 60;
    int sec = second % 60;
    String minString = min < 10 ? "0$min" : min.toString();
    String secString = sec < 10 ? "0$sec" : sec.toString();
    return "$minString:$secString";
  }

  int next = 0;

  @override
  void dispose() {
    super.dispose();
    _scrollController.dispose();
    AudioPlayerUtil.removePositionListener(this);
    AudioPlayerUtil.removeStatusListener(this);
  }

  void scrollToIndex(int index) {
    const itemExtent = 36.0; // 每个item的高度
    _scrollController.animateTo(index * itemExtent,
        duration: const Duration(milliseconds: 500), curve: Curves.easeInOut);
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final width = size.width;
    return Scaffold(
      backgroundColor: Colors.grey[200],
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_downward_rounded),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        flexibleSpace: FlexibleSpaceBar(
          background: Container(
            color: Colors.grey[200], // 背景色设置为透明
          ),
          collapseMode: CollapseMode.parallax,
        ),
        actions: [
          const SizedBox(
            width: 4,
          ),
          IconButton(
            icon: isLove
                ? const Icon(
              Icons.favorite_rounded,
              size: 32,
              color: Colors.red,
            )
                : const Icon(
              Icons.favorite_border_rounded,
              size: 26,
            ),
            onPressed: () async {
              if (isLove) {
                SqlTools.deLove(musicModel.id.toString());
                isLove = false;
                ApiDio.getLove();
                setState(() {});
              } else {
                SqlTools.inLoveMusic(musicModel);
                isLove = true;
                ApiDio.getLove();
                setState(() {});
              }
            },
          ),
          const SizedBox(
            width: 4,
          ),
          IconButton(
            icon: const Icon(
              Icons.video_collection_rounded,
              size: 32,
              color: Colors.blueAccent,
            ),
            onPressed: () {
              Navigator.of(context).push(MaterialPageRoute(
                builder: (context) => MvResultPage(
                  searchWord: musicModel.name.toString(),
                ),
              ));
            },
          ),
          const SizedBox(
            width: 15,
          ),

          InkWell(
            child: Image.asset(
              'assets/comment.png',
              width: width * 0.08,
            ),
            onTap: () {
              Navigator.of(context).push(MaterialPageRoute(
                builder: (context) =>
                    CommentList(musicModel: AudioPlayerUtil.musicModel!),
              ));
            },
          ),
          const SizedBox(
            width: 15,
          )
        ],
      ),
      body: Container(
        margin: const EdgeInsets.all(10),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Expanded(
              flex: 12,
              child: ClipRRect(
                borderRadius: const BorderRadius.all(Radius.circular(10)),
                child: ExtendedImage.network(
                  musicModel.picUrl!,
                  fit: BoxFit.cover,
                  alignment: Alignment.topLeft,
                  cache: true,
                  loadStateChanged: (ExtendedImageState state) {
                    switch (state.extendedImageLoadState) {
                      case LoadState.loading:
                        return Image.asset(
                          "assets/app.png",
                          fit: BoxFit.fill,
                        );
                      case LoadState.failed:
                        return GestureDetector(
                          child: Stack(
                            fit: StackFit.expand,
                            children: <Widget>[
                              Image.asset(
                                "assets/app.png",
                                fit: BoxFit.fill,
                              ),
                              const Positioned(
                                bottom: 0.0,
                                left: 0.0,
                                right: 0.0,
                                child: Text(
                                  "load image failed, click to reload",
                                  textAlign: TextAlign.center,
                                ),
                              )
                            ],
                          ),
                          onTap: () {
                            state.reLoadImage();
                          },
                        );
                      case LoadState.completed:
                        null;
                    }
                    return null;
                  },
                ),
              ),
            ),
            Expanded(
              flex: 4,
              child: Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      width: width * 0.66,
                      child: Text(
                        textAlign: TextAlign.center,
                        musicModel.name,
                        style: const TextStyle(
                            fontSize: 18, fontWeight: FontWeight.bold),
                        softWrap: true,
                        //overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    Text(
                      musicModel.author,
                      style: const TextStyle(
                        fontSize: 16,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            Expanded(
              flex: 9,
              child: ListWheelScrollView(
                controller: _scrollController,
                perspective: 0.01,
                itemExtent: 36,
                useMagnifier: true,
                magnification: 1.3,
                children: ApiDio.lyricsMap.entries
                    .map((value) => _buildItem(value.value))
                    .toList(),
              ),
            ),
            Expanded(
              flex: 4,
              child: Container(
                margin: const EdgeInsets.only(
                  left: 10,
                  right: 10,
                ),
                child: AudioSlider(),
              ),
            ),
            Expanded(
              flex: 4,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  IconButton(
                    icon: switch (AudioPlayerUtil.nextState) {
                      NextState.sequential => const Icon(Icons.loop_rounded),
                      NextState.random => const Icon(Icons.shuffle_rounded),
                      NextState.single => const Icon(Icons.repeat_one_rounded),
                    },
                    onPressed: () {
                      next = next + 1;
                      switch (next) {
                        case 1:
                          AudioPlayerUtil.changeNextState(NextState.random);
                          setState(() {});
                          break;
                        case 2:
                          AudioPlayerUtil.changeNextState(NextState.single);
                          setState(() {});
                          break;
                        case 3:
                          AudioPlayerUtil.changeNextState(NextState.sequential);
                          setState(() {});
                          next = 0;
                          break;
                      }
                    },
                  ),
                  SizedBox(width: 10,),
                  IconButton(
                    icon: const Icon(
                      Icons.skip_previous_rounded,
                      size: 42,
                    ),
                    onPressed: () async {
                      AudioPlayerUtil.previousMusic();
                      await ApiDio.getWord(
                          AudioPlayerUtil.musicModel!.id.toString());

                      setState(() {
                        musicModel = AudioPlayerUtil.musicModel!;
                      });
                    },
                  ),
                  IconButton(
                    icon: Icon(
                      _playing
                          ? Icons.pause_circle_filled_rounded
                          : Icons.play_circle_filled_rounded,
                      size: 58,
                      color: Colors.green,
                    ),
                    onPressed: () async {
                      AudioPlayerUtil.playerHandle(model: musicModel);
                      musicModel = AudioPlayerUtil.musicModel!;
                      await ApiDio.getWord(
                          AudioPlayerUtil.musicModel!.id.toString());
                      setState(() {
                        _playing =
                        (AudioPlayerUtil.state == PlayerState.playing);
                      });
                    },
                  ),
                  IconButton(
                    icon: const Icon(
                      Icons.skip_next_rounded,
                      size: 42,
                    ),
                    onPressed: () async {
                      AudioPlayerUtil.nextMusic();
                      await ApiDio.getWord(
                          AudioPlayerUtil.musicModel!.id.toString());
                      setState(() {
                        musicModel = AudioPlayerUtil.musicModel!;
                      });
                    },
                  ),
                  SizedBox(width: 10,),
                  IconButton(
                    icon: const Icon(
                      Icons.queue_music_rounded,
                      size: 30,
                    ),
                    onPressed: () {
                      Navigator.of(context).push(MaterialPageRoute(
                        builder: (context) => const PlayingListPage(),
                      ));
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildItem(String text) {
    return Center(
      child: Text(
        text,
        style: const TextStyle(fontSize: 13),
        textAlign: TextAlign.center,
      ),
    );
  }
}

import 'package:audioplayers/audioplayers.dart';
import 'package:custom_navigation_bar/custom_navigation_bar.dart';
import 'package:extended_image/extended_image.dart';
import 'package:flutter/material.dart';
import 'package:marquee/marquee.dart';
import 'package:vocabulary/page/shazam_encore_page.dart';
import 'package:vocabulary/page/playing_list_page.dart';
import 'package:vocabulary/page/search_page.dart';

import '../tools/get_source_tools.dart';
import '../tools/audio_play_tools.dart';
import 'music_page.dart';
import 'message_page.dart';
import 'audio_play_page.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage>
    with SingleTickerProviderStateMixin {
  int _currentIndex = 0;

  List<Widget> page = [
    const MusicPage(),
    const SearchPage(),
    const IdentifyPage(),
    MessagePage()
  ];
  late AnimationController _ctrl;
  late bool _playing = false;
  String nameAuthor = 'Happy!';
  String img = 'NOT_FOUND';
  bool opened = false;

  @override
  void initState() {
    ApiDio.getHotList();
    ApiDio.getSearchWord();
    super.initState();
    _ctrl = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 5),
    );
    AudioPlayerUtil.statusListener(
        key: this,
        listener: (state) {
          if ((AudioPlayerUtil.musicModel != null)) {
            if (mounted) {
              setState(() {
                _playing = state == PlayerState.playing;
                String author = AudioPlayerUtil.musicModel?.author ?? 'Happy!';
                nameAuthor =
                    '${AudioPlayerUtil.musicModel?.name} - ${AudioPlayerUtil.musicModel!.author}' ??
                        'Happy! - $author';
                img = AudioPlayerUtil.musicModel?.picUrl ?? 'NOT_FOUND';
                //_ctrl.repeat(reverse: false);
              });
            }
          } else {
            if (_playing == true) {
              if (mounted) {
                setState(() {
                  _playing == false;
                });
              }
            }
          }
          if (_playing) {
            _ctrl.repeat(reverse: false);
          } else {
            _ctrl.stop();
          }
          setState(() {});
        });
  }

  @override
  void dispose() {
    _ctrl.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final width = size.width;
    final height = size.height;
    return Scaffold(
      body: Stack(
        children: [
          Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                Expanded(
                  flex: 30,
                  child: Container(
                    child: page[_currentIndex],
                  ),
                ),
                Expanded(
                  flex: 3,
                  child: Container(
                    decoration: const BoxDecoration(
                      color: Colors.white,
                    ),
                    child: CustomNavigationBar(
                      iconSize: 28.0,
                      selectedColor: Colors.blue,
                      strokeColor: Colors.blue,
                      unSelectedColor: Colors.black,
                      backgroundColor: Colors.white,
                      elevation: 40,
                      scaleFactor: 0.4,
                      items: [
                        CustomNavigationBarItem(
                          icon: const Icon(Icons.home_rounded),
                          selectedIcon: const Icon(Icons.houseboat_rounded),
                          title:
                          const Text('首页', style: TextStyle(fontSize: 12)),
                          selectedTitle: const Text('首页',
                              style:
                              TextStyle(color: Colors.blue, fontSize: 12)),
                        ),
                        CustomNavigationBarItem(
                          icon: const Icon(Icons.search_rounded),
                          selectedIcon: const Icon(Icons.manage_search_rounded),
                          title:
                          const Text('搜索', style: TextStyle(fontSize: 12)),
                          selectedTitle: const Text('搜索',
                              style:
                              TextStyle(color: Colors.blue, fontSize: 12)),
                        ),
                        CustomNavigationBarItem(
                          icon: const Icon(Icons.sensors_rounded),
                          selectedIcon: const Icon(Icons.music_note_rounded),
                          title:
                          const Text('识曲', style: TextStyle(fontSize: 12)),
                          selectedTitle: const Text('识曲',
                              style:
                              TextStyle(color: Colors.blue, fontSize: 12)),
                        ),
                        CustomNavigationBarItem(
                          icon: const Icon(Icons.person_rounded),
                          selectedIcon: const Icon(Icons.person_pin_rounded),
                          title:
                          const Text('我的', style: TextStyle(fontSize: 12)),
                          selectedTitle: const Text('我的',
                              style:
                              TextStyle(color: Colors.blue, fontSize: 12)),
                        ),
                      ],
                      currentIndex: _currentIndex,
                      opacity: 0.5,
                      onTap: (index) {
                        setState(() {
                          _currentIndex = index;
                        });
                      },
                    ),
                  ),
                ),
              ],
            ),
          ),
          Column(
            children: [
              Expanded(
                flex: 20,
                child: Container(),
              ),
              Expanded(
                flex: 11,
                child: Stack(
                  alignment: Alignment.bottomLeft,
                  children: [
                    Container(
                      width: width,
                      height: height * 0.052,
                      decoration: BoxDecoration(
                        color: Colors.blue.shade400,
                        borderRadius: BorderRadius.circular(10),
                      ),
                      //padding: const EdgeInsets.all(10),
                      margin: const EdgeInsets.only(
                        left: 10,
                        right: 10,
                      ),
                      child: Row(
                        children: [
                          Expanded(flex: 1, child: Container()),
                          Expanded(
                            flex: 24,
                            child: InkWell(
                              onTap: () {
                                setState(() {
                                  if (AudioPlayerUtil.list.isEmpty) return;
                                  Navigator.of(context).push(MaterialPageRoute(
                                    builder: (context) => const MusicPlayer(),
                                  ));
                                });
                              },
                              child: Container(
                                margin: EdgeInsets.only(
                                  left: width * 0.18 + 8,
                                ),
                                child: Marquee(
                                  text: nameAuthor,
                                  blankSpace: 20.0,
                                  velocity: 36.0,
                                  pauseAfterRound: const Duration(seconds: 0),
                                  style: const TextStyle(color: Colors.white),
                                ),
                              ),
                            ),
                          ),
                          Expanded(
                            flex: 4,
                            child: InkWell(
                              child: const Icon(
                                Icons.skip_previous_rounded,
                                color: Colors.white,
                              ),
                              onTap: () {
                                print('上一曲');
                                AudioPlayerUtil.previousMusic();
                              },
                            ),
                          ),
                          Expanded(
                            flex: 4,
                            child: InkWell(
                              child: Icon(
                                !_playing
                                    ? Icons.play_circle_outline_rounded
                                    : Icons.pause_circle_outline_rounded,
                                size: 32,
                                color: Colors.white,
                              ),
                              onTap: () {
                                AudioPlayerUtil.playerHandle(
                                    model: AudioPlayerUtil.musicModel!);
                              },
                            ),
                          ),
                          Expanded(
                            flex: 4,
                            child: InkWell(
                              child: const Icon(
                                Icons.skip_next_rounded,
                                color: Colors.white,
                              ),
                              onTap: () {
                                print('下一曲');
                                AudioPlayerUtil.nextMusic();
                              },
                            ),
                          ),
                          Expanded(
                            flex: 4,
                            child: Builder(
                              builder: (BuildContext context) {
                                return Scaffold(
                                  backgroundColor: Colors.transparent,
                                  body: InkWell(
                                    child: Container(
                                      alignment: Alignment.center,
                                      child: const Icon(
                                        Icons.queue_music_rounded,
                                        color: Colors.white,
                                      ),
                                    ),
                                    onTap: () {
                                      //if(AudioPlayerUtil.isListPlayer)print('==========');
                                      if (AudioPlayerUtil.list.isEmpty) {
                                        return;
                                      }
                                      Navigator.of(context)
                                          .push(MaterialPageRoute(
                                        builder: (context) =>
                                        const PlayingListPage(),
                                      ));
                                    },
                                  ),
                                );
                              },
                            ),
                          ),
                          Expanded(flex: 1, child: Container()),
                        ],
                      ),
                    ),
                    Container(
                      margin: const EdgeInsets.only(left: 20, bottom: 5),
                      child: Stack(
                        alignment: Alignment.center,
                        children: [
                          RotationTransition(
                            turns: CurvedAnimation(
                              parent: _ctrl,
                              curve: Curves.linear,
                            ),
                            child: ClipOval(
                              child: img == 'NOT_FOUND'
                                  ? Image.asset(
                                "assets/app.png",
                                width: 66,
                                height: 66,
                                fit: BoxFit.cover,
                                alignment: Alignment.topLeft,
                              )
                                  : ExtendedImage.network(
                                img,
                                width: width * 0.183,
                                height: width * 0.183,
                                fit: BoxFit.cover,
                                alignment: Alignment.topLeft,
                                cache: true,
                                loadStateChanged:
                                    (ExtendedImageState state) {
                                  switch (state.extendedImageLoadState) {
                                    case LoadState.loading:
                                      return Image.asset(
                                        "assets/app.png",
                                        fit: BoxFit.fill,
                                      );
                                    case LoadState.failed:
                                      return GestureDetector(
                                        child: Stack(
                                          fit: StackFit.expand,
                                          children: <Widget>[
                                            Image.asset(
                                              "assets/app.png",
                                              fit: BoxFit.fill,
                                            ),
                                            const Positioned(
                                              bottom: 0.0,
                                              left: 0.0,
                                              right: 0.0,
                                              child: Text(
                                                "load image failed, click to reload",
                                                textAlign:
                                                TextAlign.center,
                                              ),
                                            )
                                          ],
                                        ),
                                        onTap: () {
                                          state.reLoadImage();
                                        },
                                      );
                                    case LoadState.completed:
                                      null;
                                  }
                                  return null;
                                },
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              Expanded(
                flex: 3,
                child: Container(),
              ),
            ],
          )
        ],
      ),
    );
  }
}


import 'dart:async';

import 'package:flutter/material.dart';
import 'package:vocabulary/tools/get_source_tools.dart';
import 'package:vocabulary/widget/music_list.dart';

import '../model/music.dart';
import '../tools/audio_play_tools.dart';
import '../widget/mv_card.dart';

class MessagePage extends StatefulWidget {
  MessagePage({super.key});

  @override
  State<MessagePage> createState() => _MessagePageState();
}

class _MessagePageState extends State<MessagePage> {
  int state = 0;
  String img = '';
  late Timer _timer;

  @override
  void initState() {
    super.initState();
    _timer = Timer.periodic(Duration(seconds: 1), (timer) async {
      await Future.wait([
        ApiDio.getDownload(),
        ApiDio.getLove(),
        ApiDio.getHistory(),
        ApiDio.getMvHistory()
      ]).then((values) => setState(() {}));
    });
    ApiDio.getDownload();
    ApiDio.getMvHistory();
    AudioPlayerUtil.positionListener(
        key: this,
        listener: (position) {
          if (mounted) {
            setState(() {});
          }
        });
  }

  @override
  void dispose() {
    _timer.cancel();
    super.dispose();
    AudioPlayerUtil.removePositionListener(this);
  }

  List<List<MusicModel>> title = [
    ApiDio.loveList,
    ApiDio.localList,
    ApiDio.historyList,
  ];

  bool isLove = false;

  bool inProduction = const bool.fromEnvironment('dart.vm.product');

  List<bool> colorState = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('我的'),
        flexibleSpace: FlexibleSpaceBar(
          collapseMode: CollapseMode.parallax,
        ),
        // actions: [
        //   !inProduction
        //       ? IconButton(
        //           onPressed: () {
        //             Navigator.of(context).push(MaterialPageRoute(
        //               builder: (context) => DeBugPage(),
        //             ));
        //           },
        //           icon: const Icon(Icons.bug_report_rounded,
        //               size: 28, color: Colors.red),
        //         )
        //       : IconButton(onPressed: () {}, icon: Container()),
        //   IconButton(
        //     onPressed: () {
        //       showToast('敬请期待-音乐迁移');
        //     },
        //     icon: const Icon(Icons.keyboard_control_rounded,
        //         size: 28, color: Colors.black),
        //   ),
        //   SizedBox(
        //     width: 5,
        //   ),
        // ],
      ),
      body: RefreshIndicator(
        child: ListView(
          scrollDirection: Axis.vertical, // 使用ListView可以轻松实现滚动
          children: <Widget>[
            ClipRRect(
              borderRadius: BorderRadius.circular(10),
              child: _buildMusicEntrySection(),
            ),
            _stateBuild(context),
            SizedBox(
              height: 60,
            ),
          ],
        ),
        onRefresh: () async {
          await Future.wait([
            ApiDio.getDownload(),
            ApiDio.getLove(),
            ApiDio.getHistory(),
            ApiDio.getMvHistory()
          ]).then((values) => setState(() {}));
        },
      ),
    );
  }

  Widget _stateBuild(BuildContext context) {
    List<Container> _list = [
      Container(
        child: Column(
          children: ApiDio.loveList.isEmpty
              ? []
              : ApiDio.loveList
              .map(
                (song) => MusicListWidget(state: state, model: song),
          )
              .toList(),
        ),
      ),
      Container(
        child: Column(
          children: ApiDio.localList.isEmpty
              ? []
              : ApiDio.localList
              .map(
                (song) => MusicListWidget(state: state, model: song),
          )
              .toList(),
        ),
      ),
      Container(
        child: Column(
          children: ApiDio.historyList.isEmpty
              ? []
              : ApiDio.historyList
              .map(
                (song) => MusicListWidget(state: state, model: song),
          )
              .toList(),
        ),
      ),
      Container(
        child: Column(
          children: ApiDio.mvHistory.isEmpty
              ? []
              : ApiDio.mvHistory
              .map(
                (song) => MvCard(
              mvSheet: song,
              isHistory: true,
            ),
          )
              .toList(),
        ),
      ),
    ];

    return _list[state];
  }

  // 构建喜欢的音乐入口部分
  Widget _buildMusicEntrySection() {
    return Container(
      decoration: BoxDecoration(
        borderRadius: const BorderRadius.all(Radius.circular(10)),
        color: Colors.grey.shade200,
      ),
      padding: const EdgeInsets.all(15),
      alignment: Alignment.center,
      margin: const EdgeInsets.only(
        top: 6,
        bottom: 6,
        left: 18,
        right: 18,
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: <Widget>[
          Expanded(
            child: _buildButton('我喜欢', Icons.favorite_sharp,
                state == 0 ? Colors.red : Colors.black45, () {
                  state = 0;
                  setState(() {});
                }),
          ),
          Expanded(
            child: _buildButton('本地音乐', Icons.folder_rounded,
                state == 1 ? Colors.orange : Colors.black45, () {
                  state = 1;
                  setState(() {});
                }),
          ),
          Expanded(
            child: _buildButton('音乐历史', Icons.music_note_rounded,
                state == 2 ? Colors.blueAccent : Colors.black45, () {
                  state = 2;
                  setState(() {});
                }),
          ),
          Expanded(
            child: _buildButton('视频历史', Icons.video_collection_rounded,
                state == 3 ? Colors.green : Colors.black45, () {
                  state = 3;
                  setState(() {});
                }),
          ),
        ],
      ),
    );
  }

  // 辅助函数，用于创建按钮
  Widget _buildButton(
      String title, IconData icon, Color color, VoidCallback onPressed) {
    return Column(
      children: <Widget>[
        IconButton(
          icon: Icon(icon, size: 24, color: color),
          onPressed: onPressed,
        ),
        Text(title, style: TextStyle(fontSize: 12, color: color))
      ],
    );
  }
}



import 'package:extended_image/extended_image.dart';
import 'package:flutter/material.dart';
import 'package:vocabulary/model/music.dart';

import '../tools/get_source_tools.dart';

class CommentList extends StatefulWidget {
  const CommentList({super.key, required this.musicModel});
  final MusicModel musicModel;
  @override
  _CommentListState createState() => _CommentListState();
}

class _CommentListState extends State<CommentList> {
  late MusicModel musicModel;
  @override
  void initState() {
    musicModel = widget.musicModel;
    init();
    super.initState();
  }

  void init() async {
    setState(() {});
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        surfaceTintColor: Colors.white,
        title: const Text('热门评论'),
      ),
      body: Container(
        padding: const EdgeInsets.all(10),
        child: ListView.builder(
          itemCount: ApiDio.commentList.length,
          itemBuilder: (context, index) {
            return ListTile(
              isThreeLine: true,
              contentPadding:
              const EdgeInsets.symmetric(horizontal: 8.0, vertical: 2),
              leading: ClipRRect(
                borderRadius: BorderRadius.circular(10),
                //child: Image.network(ApiDio.commentList[index].user.avatarUrl.toString()),
                child: ExtendedImage.network(
                  ApiDio.commentList[index].user.avatarUrl.toString(),
                  fit: BoxFit.cover,
                  alignment: Alignment.topLeft,
                  cache: true,
                  loadStateChanged: (ExtendedImageState state) {
                    switch (state.extendedImageLoadState) {
                      case LoadState.loading:
                        return Image.asset(
                          "assets/app.png",
                          fit: BoxFit.fill,
                        );
                      case LoadState.failed:
                        return GestureDetector(
                          child: Stack(
                            fit: StackFit.expand,
                            children: <Widget>[
                              Image.asset(
                                "assets/app.png",
                                fit: BoxFit.fill,
                              ),
                              const Positioned(
                                bottom: 0.0,
                                left: 0.0,
                                right: 0.0,
                                child: Text(
                                  "load image failed, click to reload",
                                  textAlign: TextAlign.center,
                                ),
                              )
                            ],
                          ),
                          onTap: () {
                            state.reLoadImage();
                          },
                        );
                      case LoadState.completed:
                        null;
                    }
                    return null;
                  },
                ),
              ),
              title: Text(
                '${ApiDio.commentList[index].user.nickname}   ${ApiDio.commentList[index].timeStr}',
                style: const TextStyle(fontSize: 15, color: Colors.black),
              ),
              subtitle: Column(
                // 使用Column来包含文本和点赞量
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(ApiDio.commentList[index].content,
                      style: const TextStyle(fontSize: 12)),
                  Row(
                    // 添加点赞量
                    children: <Widget>[
                      const Icon(Icons.favorite_rounded,
                          size: 16, color: Colors.red),
                      Text(
                          ' ${formatLikeCount(ApiDio.commentList[index].likedCount)}', // 假设likeCount是点赞数量
                          style:
                          const TextStyle(fontSize: 12, color: Colors.grey))
                    ],
                  ),
                ],
              ),
              onTap: () {
                setState(() {});
              },
            );
          },
        ),
      ),
    );
  }

  String formatLikeCount(int count) {
    if (count < 1000) {
      // 如果小于1000，直接返回数字
      return count.toString();
    } else if (count < 10000) {
      // 如果小于10000，转换为k格式
      double kCount = count / 1000;
      return '${kCount.toStringAsFixed(1)}k';
    } else {
      // 如果大于等于10000，转换为w格式
      double wCount = count / 10000;
      return '${wCount.toStringAsFixed(1)}w';
    }
  }
}


import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/material.dart';
import 'package:oktoast/oktoast.dart';
import 'package:vocabulary/tools/get_source_tools.dart';
import 'package:vocabulary/tools/audio_play_tools.dart';
import 'package:vocabulary/tools/temp.dart';
import 'package:vocabulary/widget/mv_card.dart';

import '../Widget/music_card.dart';
import '../widget/banner_card.dart';
import 'random_music_page.dart';

class MusicPage extends StatefulWidget {
  const MusicPage({super.key});

  @override
  State<MusicPage> createState() => _MusicPageState();
}

class _MusicPageState extends State<MusicPage>
    with SingleTickerProviderStateMixin {
  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final width = size.width;
    return Scaffold(
      appBar: AppBar(
        title: const Text('推荐'),
        flexibleSpace: const FlexibleSpaceBar(
          collapseMode: CollapseMode.parallax,
        ),
        actions: [
          IconButton(
            onPressed: (){
              try {
                if (AudioPlayerUtil.state == PlayerState.playing &&
                    AudioPlayerUtil.musicModel!.id ==
                        ApiDio.randomList.first.id) {
                } else {
                  AudioPlayerUtil.playerHandle(model: ApiDio.randomList.first);
                }
              } catch (e) {
                print(e);
              } finally {
                Navigator.of(context)
                    .push(MaterialPageRoute(builder: (context) => RandPage()));
              }
            },
            icon: const Icon(Icons.library_music_rounded,size: 28,color: Colors.blue),
          ),
          const SizedBox(width: 6),
        ],
      ),
      body: RefreshIndicator(
        child: SingleChildScrollView(
          scrollDirection: Axis.vertical,
          reverse: false,
          child: Column(
            children: [
              Container(
                  height: width * 0.38,
                  padding: const EdgeInsets.all(3),
                  margin: const EdgeInsets.only(
                    left: 15,
                    right: 15,
                    bottom: 5,
                  ),
                  alignment: Alignment.center,
                  child: const ClipRRect(
                    borderRadius: BorderRadius.all(Radius.circular(10)),
                    child: BannerPage(),
                  )),
              Container(
                margin: const EdgeInsets.only(left: 17),
                child: Row(
                  children: [
                    const Text(
                      '今日推荐',
                      style: TextStyle(fontSize: 18),
                    ),
                    Container(
                      width: 15,
                    ),
                  ],
                ),
              ),
              SizedBox(
                height: 180,
                child: SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  reverse: false,
                  padding: const EdgeInsets.symmetric(horizontal: 6),
                  child: Row(
                    children: ApiDio.musicSheetList.isEmpty
                        ? []
                        : ApiDio.musicSheetList
                        .map(
                          (song) =>
                          MusicCard(musicSheet: song, isOne: false),
                    )
                        .toList(),
                  ),
                ),
              ),
              Container(
                margin: const EdgeInsets.only(left: 17),
                child: Row(
                  children: [
                    const Text(
                      ' MV推荐',
                      style: TextStyle(fontSize: 18),
                    ),
                    Container(
                      width: 14,
                    ),
                  ],
                ),
              ),
              Container(
                height: width * 0.618 * 10.3,
                margin: const EdgeInsets.only(top: 4),
                child: Column(
                  children: ApiDio.newMvList.isEmpty
                      ? []
                      : ApiDio.newMvList
                      .map(
                        (song) => MvCard(mvSheet: song),
                  )
                      .toList(),
                ),
              ),
            ],
          ),
        ),
        onRefresh: () async {
          await Future.wait([
            ApiDio.getBan(),
            ApiDio.getSheet(),
          ]).then((values) => setState(() {}));
        },
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:vocabulary/tools/get_source_tools.dart';

import '../widget/mv_card.dart';

class MvResultPage extends StatefulWidget {
  const MvResultPage({super.key, this.searchWord = '海底', this.url = ''});
  final String searchWord;
  final String url;

  @override
  _MvResultPageState createState() => _MvResultPageState();
}

class _MvResultPageState extends State<MvResultPage>
    with SingleTickerProviderStateMixin {
  final TextEditingController _searchController = TextEditingController();
  bool opened = false;
  bool state = false;

  Future<void> init() async {
    await ApiDio.getSearchMvId(widget.searchWord);
    await ApiDio.getSearchMV();
    state = true;
    setState(() {});
  }

  @override
  void initState() {
    super.initState();
    init();
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        surfaceTintColor: Colors.white,
        leading: IconButton(
          icon: const Icon(
            Icons.arrow_back,
            color: Colors.black,
          ), // 返回箭头
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: RefreshIndicator(
        child: state
            ? ListView.builder(
          itemCount: ApiDio.searchMvList.length,
          itemBuilder: (context, index) {
            return MvCard(mvSheet: ApiDio.searchMvList[index]);
          },
        )
            : const Center(
          child: Text('加载中...'),
        ),
        onRefresh: () async {
          await ApiDio.getSearchMvId(widget.searchWord);
          await ApiDio.getSearchMV();
          setState(() {});
        },
      ),
    );
  }
}

import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/material.dart';

import '../tools/audio_play_tools.dart';

class PlayingListPage extends StatefulWidget {
  const PlayingListPage({super.key});

  @override
  _PlayingListPageState createState() => _PlayingListPageState();
}

class _PlayingListPageState extends State<PlayingListPage> {
  bool _isPlaying = false;

  @override
  void initState() {
    super.initState();
    AudioPlayerUtil.positionListener(
        key: this,
        listener: (position) {
          if (mounted) {
            setState(() {});
          }
        });
  }

  @override
  void dispose() {
    super.dispose();
    AudioPlayerUtil.removePositionListener(this);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        surfaceTintColor: Colors.white,
        title: const Text('当前播放列表'),
      ),
      body: Container(
        padding: const EdgeInsets.all(10),
        child: ListView.builder(
          itemCount: AudioPlayerUtil.list.length,
          itemBuilder: (context, index) {
            if (AudioPlayerUtil.state == PlayerState.playing) {
              if (AudioPlayerUtil.musicModel!.id ==
                  AudioPlayerUtil.list[index].id) {
                _isPlaying = true;
              } else {
                _isPlaying = false;
              }
            }
            return ListTile(
              isThreeLine: true,
              dense: true,
              contentPadding:
              const EdgeInsets.symmetric(horizontal: 8.0, vertical: 2),
              title: Text(
                AudioPlayerUtil.list[index].name,
                style: TextStyle(
                    fontSize: 16,
                    color: _isPlaying ? Colors.blue : Colors.black54),
              ),
              subtitle: Text(
                AudioPlayerUtil.list[index].author,
                style: const TextStyle(fontSize: 12),
              ),
              trailing: IconButton(
                onPressed: () {

                  if(AudioPlayerUtil.list[index] == AudioPlayerUtil.musicModel!){
                    AudioPlayerUtil.nextMusic();
                    AudioPlayerUtil.removeMusicModel(
                        model: AudioPlayerUtil.list[index]);
                    setState(() {});
                  }else{
                    AudioPlayerUtil.removeMusicModel(
                        model: AudioPlayerUtil.list[index]);
                    setState(() {});
                  }
                },
                icon: const Icon(
                  Icons.clear_outlined,
                  size: 18,
                  color: Colors.grey,
                ),
              ),
              onTap: () {
                AudioPlayerUtil.listPlayerHandle(
                    musicModels: AudioPlayerUtil.list,
                    musicModel: AudioPlayerUtil.list[index]);
                setState(() {});
              },
            );
          },
        ),
      ),
    );
  }
}



import 'package:audioplayers/audioplayers.dart';
import 'package:extended_image/extended_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_card_swiper/flutter_card_swiper.dart';
import 'package:vocabulary/widget/random_music_card.dart';

import 'package:vocabulary/tools/audio_play_tools.dart';

import '../model/music.dart';
import '../tools/get_source_tools.dart';
import 'music_comment.dart';


class RandPage extends StatefulWidget {
  RandPage({Key? key}) : super(key: key);
  @override
  _RandPageState createState() => _RandPageState();
}

class _RandPageState extends State<RandPage> {

  List<CardChildPage> cards = [
    CardChildPage(),
    CardChildPage(),
  ];
  late CardSwiperController _cardSwiperController;

  @override
  void initState() {
    _cardSwiperController = CardSwiperController();
    super.initState();
    AudioPlayerUtil.positionListener(key: this, listener: (position){
      setState(() {});
    });
  }

  @override
  void dispose() {
    _cardSwiperController.dispose();
    AudioPlayerUtil.removePositionListener(this);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size =MediaQuery.of(context).size;
    final width =size.width;
    return PopScope(
      onPopInvoked: (state){
        if(AudioPlayerUtil.state == PlayerState.paused){

        }else{
          AudioPlayerUtil.listPlayerHandle(musicModels: ApiDio.randomList, musicModel:  ApiDio.randomList[ApiDio.randomList.length-2]);
        }
      },
      child: Scaffold(
        appBar: AppBar(
          flexibleSpace: FlexibleSpaceBar(
            background: Container(
              color: Colors.white, // 背景色设置为透明
            ),
            collapseMode: CollapseMode.parallax,

          ),
        ),
        body: AudioPlayerUtil.musicModel == null?Container():Flex(
          direction: Axis.vertical,
          children:[
            Flexible(
              child: CardSwiper(
                controller: _cardSwiperController,
                cardsCount: cards.length,
                cardBuilder: (context, index, percentThresholdX, percentThresholdY) => cards[index],
                onSwipe: (current,next,c) async {
                  print('current: $current, next: $next');
                  await ApiDio.getRandomMusic(1).then((value){
                    AudioPlayerUtil.listPlayerHandle(musicModels: ApiDio.randomList, musicModel:  ApiDio.randomList[ApiDio.randomList.length-2]);
                  });
                  return true;
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

}
import 'package:flutter/material.dart';
import 'package:vocabulary/tools/sqlite_tools.dart';

import '../tools/get_source_tools.dart';
import 'search_result_page.dart';

class SearchPage extends StatefulWidget {
  const SearchPage({super.key});

  @override
  State<SearchPage> createState() => _SearchPageState();
}

class _SearchPageState extends State<SearchPage> {
  final TextEditingController _searchController = TextEditingController();
  List<String> searchResults = [];
  bool noHistory = true;

  @override
  void initState() {
    ApiDio.getSearchWord();
    setState(() {});
    super.initState();
    _searchController.addListener(() {
      if (mounted) {}
    });
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final width = size.width;
    return Scaffold(
      appBar: AppBar(
        surfaceTintColor: Colors.white,
        title: TextField(
          onChanged: (value) async {
            await ApiDio.getSearchSuggest(value);
            if(ApiDio.historySuggest.isNotEmpty){
              noHistory = false;
            }else{
              noHistory = true;
            }
            if(value == ''){
              noHistory = true;
            }
            setState(() {});
          },
          controller: _searchController,
          decoration: InputDecoration(
            hintText: '输入搜索词...',
            hintStyle: TextStyle(color: Colors.grey[400]), // 提示文本样式
            filled: true,
            fillColor: Colors.white, // 背景颜色
            contentPadding: const EdgeInsets.only(
                left: 10, top: 10, bottom: 10, right: 10), // 内边距，增加输入文本与边框的距离
            border: OutlineInputBorder(
              // 边框样式
              borderRadius: BorderRadius.circular(10), // 圆角边框
            ),
            suffixIcon: IconButton(
              alignment: Alignment.centerLeft,
              icon: const Icon(
                Icons.search_sharp,
                color: Colors.black,
              ), // 搜索图标颜色
              onPressed: () async {
                if (_searchController.text.isEmpty) return;
                SqlTools.inSearch(_searchController.text);
                await ApiDio.getSearchWord();
                setState(() {});
                Navigator.of(context).push(MaterialPageRoute(
                  builder: (context) => SearchResultPage(
                    searchWord: _searchController.text,
                  ),
                ));
              },
            ),
          ),
        ),
      ),
      body: noHistory?RefreshIndicator(
        child: Column(
          children: [
            Container(
              color: Colors.white,
              margin: const EdgeInsets.only(left: 18, top: 10),
              alignment: Alignment.centerLeft,
              child: Row(
                children: [
                  const Icon(
                    Icons.access_time_filled_rounded,
                    color: Colors.blueAccent,
                  ),
                  const Text(
                    '搜索历史',
                    style: TextStyle(
                        fontSize: 18,
                        color: Colors.blue,
                        fontWeight: FontWeight.bold),
                  ),
                  IconButton(
                    alignment: Alignment.center,
                    onPressed: () async {
                      await SqlTools.deSearch();
                      await ApiDio.getSearchWord();
                      setState(() {});
                    },
                    icon: const Icon(
                      Icons.delete,
                      size: 18,
                      color: Colors.blue,
                    ),
                  )
                ],
              ),
            ),
            Container(
              margin: const EdgeInsets.only(left: 8, top: 8),
              color: Colors.white,
              alignment: Alignment.centerLeft,
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                reverse: true,
                padding: const EdgeInsets.symmetric(horizontal: 6),
                child: Row(
                  children: ApiDio.searchList.isEmpty
                      ? []
                      : ApiDio.searchList
                      .map(
                        (song) => Container(
                      margin: const EdgeInsets.symmetric(horizontal: 6),
                      child: InkWell(
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(6),
                          child: Container(
                            color: Colors.grey.shade200,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 12, vertical: 6),
                            child: Text(
                              song,
                              style: const TextStyle(fontSize: 15),
                            ),
                          ),
                        ),
                        onTap: () async {
                          SqlTools.inSearch(song);
                          await ApiDio.getSearchWord();
                          setState(() {});
                          Navigator.of(context).push(MaterialPageRoute(
                            builder: (context) => SearchResultPage(
                              searchWord: song,
                            ),
                          ));
                        },
                      ),
                    ),
                  )
                      .toList(),
                ),
              ),
            ),
            Divider(
              indent: 15,
              endIndent: 15,
              color: Colors.grey.shade200,
            ),
            Expanded(
              flex: 5,
              child: Container(
                  color: Colors.white,
                  margin: const EdgeInsets.only(left: 18),
                  alignment: Alignment.centerLeft,
                  child: Row(
                    children: [
                      const Icon(
                        Icons.local_fire_department_rounded,
                        color: Colors.redAccent,
                      ),
                      const Text(
                        '今日热搜',
                        style: TextStyle(
                            fontSize: 18,
                            color: Colors.red,
                            fontWeight: FontWeight.bold),
                      ),
                      IconButton(
                        onPressed: () {
                          ApiDio.getHotList();
                          setState(() {});
                        },
                        icon: const Icon(
                          Icons.refresh_rounded,
                          size: 18,
                          color: Colors.red,
                        ),
                      ),
                    ],
                  )),
            ),
            Expanded(
              flex: 40,
              child: Container(
                color: Colors.white,
                child: ListView.builder(
                  itemCount: ApiDio.hotModelList.length,
                  itemBuilder: (BuildContext context, int index) {
                    return ListTile(
                      dense: true,
                      title: Text(
                        '${index + 1}  ${ApiDio.hotModelList[index].searchWord}',
                        style: TextStyle(fontSize: 16),
                      ), // 显示序号和搜索词
                      trailing: ApiDio.hotModelList[index].iconUrl != null &&
                          index != 2
                          ? Image.network(
                          width: width * 0.04,
                          ApiDio.hotModelList[index].iconUrl!)
                          : const Text(''),
                      onTap: () async {
                        SqlTools.inSearch(
                            ApiDio.hotModelList[index].searchWord);
                        await ApiDio.getSearchWord();
                        setState(() {});
                        Navigator.of(context).push(MaterialPageRoute(
                          builder: (context) => SearchResultPage(
                            searchWord: ApiDio.hotModelList[index].searchWord,
                          ),
                        ));
                      },
                    );
                  },
                ),
              ),
            ),
            Expanded(
              flex: 8,
              child: Container(),
            )
          ],
        ),
        onRefresh: () async {
          ApiDio.getHotList();
          await ApiDio.getSearchWord();
          setState(() {});
        },
      ):Container(
        height: 280,
        child: ListView.builder(
          itemCount: ApiDio.historySuggest.length,
          itemBuilder: (context, index) {
            return ListTile(
              dense: true,
              contentPadding: const EdgeInsets.symmetric(
                  horizontal: 8.0, vertical: 4),
              title: Text(
                ApiDio.historySuggest[index],
                style: const TextStyle(fontSize: 16),
              ),
              onTap: () async {
                SqlTools.inSearch(ApiDio.historySuggest[index]);
                await ApiDio.getSearchWord();
                setState(() {});
                Navigator.of(context).push(MaterialPageRoute(
                  builder: (context) => SearchResultPage(
                    searchWord: ApiDio.historySuggest[index],
                  ),
                ));
              },
            );
          },
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:oktoast/oktoast.dart';
import 'package:vocabulary/model/music.dart';
import 'package:vocabulary/tools/get_source_tools.dart';
import 'package:vocabulary/tools/audio_play_tools.dart';

import 'dart:convert';
import '../model/search.dart';
import '../tools/sqlite_tools.dart';
import '../widget/mv_card.dart';

class SearchResultPage extends StatefulWidget {
  const SearchResultPage(
      {super.key, this.searchWord = '海底', this.isVideo = false, this.url = ''});
  final String searchWord;
  final bool isVideo;
  final String url;

  @override
  _SearchResultPageState createState() => _SearchResultPageState();
}

class _SearchResultPageState extends State<SearchResultPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  final TextEditingController _searchController = TextEditingController();
  bool opened = false;
  List<SearchModel> searchModelList = [];
  bool state = false;

  void search(String word) async {
    String jsonString = await ApiDio.getSearch(word);
    Map<String, dynamic> jsonDio = jsonDecode(jsonString);
    List<dynamic> jsonSong = jsonDio['result']['songs'];
    setState(() {
      for (Map<String, dynamic> json_song_ in jsonSong) {
        searchModelList.add(searchModelFromJson(json_song_));
      }
    });
  }

  Future<void> init() async {
    await ApiDio.getSearchMvId(widget.searchWord);
    await ApiDio.getSearchMV();
    state = true;
    setState(() {

    });
  }

  List<MusicModel> musicModelList = [];

  List<bool> isLoveState = [];

  @override
  void initState() {
    super.initState();
    init();
    musicModelList = AudioPlayerUtil.list;
    _tabController = TabController(vsync: this, length: 2);
    search(widget.searchWord);
    AudioPlayerUtil.positionListener(
        key: this,
        listener: (position) {
          setState(() {});
        });
  }

  @override
  void dispose() {
    _tabController.dispose();
    AudioPlayerUtil.removePositionListener(this);
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: !widget.isVideo
          ? AppBar(
        surfaceTintColor: Colors.white,
        bottom: TabBar(
          controller: _tabController,
          labelColor: Colors.blue, //选中时颜色
          unselectedLabelColor: Colors.black26, //未选中时颜色
          tabs: const [
            Tab(
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.music_note_rounded),
                  Text('音乐'),
                ],
              ),
            ),
            Tab(
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(Icons.video_collection_rounded),
                  Text('视频')
                ],
              ),
            ),
          ],
        ),
        title: TextField(
          controller: _searchController,
          decoration: InputDecoration(
            hintText: widget.searchWord,
            hintStyle: TextStyle(color: Colors.grey[400]), // 提示文本样式
            filled: true, // 设置为true，应用背景颜色
            fillColor: Colors.white, // 背景颜色
            contentPadding: const EdgeInsets.only(
                left: 20,
                top: 10,
                bottom: 10,
                right: 10), // 内边距，增加输入文本与边框的距离
            border: OutlineInputBorder(
              // 边框样式
              borderRadius: BorderRadius.circular(10), // 圆角边框
            ),
            suffixIcon: IconButton(
              alignment: Alignment.centerLeft,
              icon: const Icon(
                Icons.search_sharp,
                color: Colors.black,
              ), // 搜索图标颜色
              onPressed: () async {
                if (_searchController.text.isEmpty) return;
                SqlTools.inSearch(_searchController.text);
                await ApiDio.getSearchWord();
                setState(() {});
                Navigator.of(context).push(
                  MaterialPageRoute(
                    builder: (context) => SearchResultPage(
                      searchWord: _searchController.text == ''
                          ? widget.searchWord
                          : _searchController.text,
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      )
          : null,
      body: TabBarView(
        controller: _tabController,
        children: [
          ApiDio.searchList.isEmpty
              ? const Center(
            child: Text(
              '加载中……',
              style: TextStyle(fontSize: 20, color: Colors.grey),
            ),
          )
              : ListView.builder(
            itemCount: searchModelList.length,
            itemBuilder: (context, index) {
              isLoveState.add(SqlTools.isLoveMusic(
                  searchModelList[index].id.toString()));
              return Slidable(
                endActionPane: ActionPane(
                  motion: const ScrollMotion(),
                  children: [
                    SlidableAction(
                      onPressed: (BuildContext context) async {
                        await ApiDio.getMusic(searchModelList[index].id)
                            .then((value) {
                          if (isLoveState[index]) {
                            SqlTools.deLove(searchModelList[index]
                                .id
                                .toString()
                                .toString());
                            isLoveState[index] = false;
                            ApiDio.getLove();
                            setState(() {});
                          } else {
                            SqlTools.inLoveMusic(value);
                            isLoveState[index] = true;
                            ApiDio.getLove();
                            setState(() {});
                          }
                        });
                      },
                      backgroundColor: Colors.orangeAccent,
                      foregroundColor: Colors.red,
                      icon: isLoveState[index]
                          ? Icons.favorite_rounded
                          : Icons.favorite_border_rounded,
                      label: '喜欢',
                    ),
                    SlidableAction(
                      onPressed: (BuildContext context) async {
                        await ApiDio.getMusic(searchModelList[index].id)
                            .then((value) {
                          SqlTools.inDownload(value);
                          setState(() {});
                        });
                      },
                      backgroundColor: const Color(0xFF0029A7),
                      foregroundColor: Colors.white,
                      icon: Icons.downloading_rounded,
                      label: '下载',
                    ),
                  ],
                ),
                child: ListTile(
                  isThreeLine: true,
                  dense: true,
                  contentPadding: const EdgeInsets.symmetric(
                      horizontal: 8.0, vertical: 4),
                  leading: IconButton(
                    icon: const Icon(Icons.add_circle_outline_rounded),
                    onPressed: () async {
                      await ApiDio.getMusic(searchModelList[index].id)
                          .then((value) {
                        if (value.mp3Url != '') {
                          if (widget.isVideo) {
                            AudioPlayerUtil.addMusicModel(models: value);
                          } else {
                            AudioPlayerUtil.addMusicModelNext(
                                models: value);
                          }
                        }
                      });
                    },
                  ),
                  title: Text(
                    searchModelList[index].name,
                    style: const TextStyle(fontSize: 16),
                  ),
                  subtitle: Text(
                    searchModelList[index]
                        .artists
                        .map((artist) => artist.name)
                        .join(', '),
                    style: const TextStyle(fontSize: 12),
                  ),
                  onTap: () async {
                    if (widget.isVideo) {
                      showToast('点击收藏');
                    } else {
                      await ApiDio.getMusic(searchModelList[index].id)
                          .then((value) {
                        if (value.mp3Url != '') {
                          AudioPlayerUtil.addMusicModel(models: value);
                          AudioPlayerUtil.listPlayerHandle(
                              musicModels: AudioPlayerUtil.list,
                              musicModel: value);
                        }
                      });
                    }
                  },
                ),
              );
            },
          ),
          RefreshIndicator(
            child: state
                ? ListView.builder(
              itemCount: ApiDio.searchMvList.length,
              itemBuilder: (context, index) {
                return MvCard(mvSheet: ApiDio.searchMvList[index]);
              },
            )
                : const Center(
              child: Text(
                '加载中...',
                style: TextStyle(fontSize: 20, color: Colors.grey),
              ),
            ),
            onRefresh: () async {
              await ApiDio.getSearchMvId(widget.searchWord);
              await ApiDio.getSearchMV();
              setState(() {});
            },
          ),
        ],
      ),
    );
  }
}
import 'dart:async';
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:record/record.dart';
import 'package:vocabulary/widget/result_card.dart';

import '../model/music.dart';
import '../tools/get_source_tools.dart';
import '../tools/audio_play_tools.dart';
import '../tools/permission_tools.dart';

class IdentifyPage extends StatefulWidget {
  const IdentifyPage({super.key});

  @override
  _IdentifyPageState createState() => _IdentifyPageState();
}

class _IdentifyPageState extends State<IdentifyPage>
    with SingleTickerProviderStateMixin {
  late String path;
  final record = Record();
  bool isRecording = false;
  late MusicModel musicModel;
  bool isRES = false;

  @override
  void initState() {
    super.initState();

    AudioPlayerUtil.statusListener(
      key: this,
      listener: (sate) {
        if (mounted) {
          setState(() {});
        }
      },
    );
  }

  Future<void> recordMusic() async {
    bool per = await PermissionUtils.requestStoragePermission();
    if (await record.hasPermission() && per == true) {
      isRecording = true;
      Directory? tempDir = await getExternalStorageDirectory();
      String? dirloc = tempDir?.path;
      var name = "temp";
      path = "${dirloc!}$name.wav";
      await record.start(
        path: path.toString(),
        encoder: AudioEncoder.wav,
        bitRate: 128000,
        samplingRate: 8000,
      );
      const timeout = Duration(seconds: 4);
      Timer(
        timeout,
            () async {
          await record.stop();
          Dio dio = Dio();
          try {
            Response response =
            await dio.post('http://114.55.94.213:5000/forward',
                data: FormData.fromMap({
                  'audio': await MultipartFile.fromFile(path.toString()),
                }));
            Map<String, dynamic> data = response.data;
            isRecording = false;
            dio.close();
            final RegExp pattern = RegExp(r'(\d+)');
            final RegExpMatch match =
            pattern.firstMatch(data['label'].toString())!;
            final String extractedNumber = match.group(0)!;

            await ApiDio.getMusic(int.parse(extractedNumber)).then((value) {
              if (value.mp3Url != '') {
                musicModel = value;
                isRES = true;
                isRecording = false;
                setState(() {});
              }
            });
          } catch (e) {
            isRecording = false;
            setState(() {});
          }
        },
      );
      setState(() {});
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          Expanded(child: Container(), flex: 1,),
          Expanded(
            flex: 1,
            child: Container(
              color: Colors.white,
              child: Center(
                child: isRecording
                    ? const Text(
                  "正在识别……",
                  style:
                  TextStyle(fontSize: 22, color: Colors.blueAccent),
                )
                    : const Text(
                  "点击开始识别",
                  style: TextStyle(fontSize: 22, color: Colors.black),
                ),
              ),
            ),
          ),
          Expanded(
            flex: 5,
            child: Container(
              alignment: Alignment.center,
              margin: const EdgeInsets.all(26),
              child: isRecording
                  ? Center(
                child: Image.asset('assets/10002.gif'),
              )
                  : InkWell(
                onTap: () {
                  setState(() {
                    recordMusic();
                  });
                },
                child: Center(
                  child: Image.asset('assets/10001.gif'),
                ),
              ),
            ),
          ),
          !isRES
              ? Expanded(flex: 1, child: Container())
              : Expanded(
            flex: 8,
            child:
            !isRES ? Container() : ResultCard(musicSheet: musicModel),
          ),
          Expanded(flex: 1, child: Container()),
        ],
      ),
    );
  }
}
import 'dart:ui';
import 'package:extended_image/extended_image.dart';
import 'package:flutter/material.dart';
import 'package:vocabulary/Page/search_result_page.dart';
import 'package:vocabulary/model/mv.dart';
import 'package:vocabulary/widget/video_player_bottom.dart';
import 'package:vocabulary/widget/video_player_center.dart';
import 'package:vocabulary/widget/video_player_gestures.dart';
import 'package:vocabulary/widget/video_player_top.dart';

import '../model/TempOther.dart';
import '../tools/get_source_tools.dart';
import '../tools/videos_play_tools.dart';

class VideoPlayerPage extends StatefulWidget {
  VideoPlayerPage({Key? key, required this.mvModel, required this.url})
      : super(key: key);

  final MvModel mvModel;
  final String url;

  @override
  _VideoPlayerPageState createState() => _VideoPlayerPageState();
}

class _VideoPlayerPageState extends State<VideoPlayerPage> {
  // 是否全屏
  bool get _isFullScreen =>
      MediaQuery.of(context).orientation == Orientation.landscape;
  Size get _window => MediaQueryData.fromView(window).size;
  double get _width => _isFullScreen ? _window.width : _window.width;
  double get _height => _isFullScreen ? _window.height : _window.width * 9 / 16;
  Widget? _playerUI;
  VideoPlayerTop? _top;
  VideoPlayerBottom? _bottom;
  LockIcon? _lockIcon; // 控制是否沉浸式的widget
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    ApiDio.getMvComment(widget.mvModel.id.toString());
    VideoPlayerUtils.playerHandle(widget.url, autoPlay: true);
    VideoPlayerUtils.initializedListener(
        key: this,
        listener: (initialize, widget) {
          if (initialize) {
            _top ??= VideoPlayerTop(
              title: this.widget.mvModel.name +
                  ' - ' +
                  this.widget.mvModel.artistName,
            );
            _lockIcon ??= LockIcon(
              lockCallback: () {
                _top!.opacityCallback(!TempValue.isLocked);
                _bottom!.opacityCallback(!TempValue.isLocked);
              },
            );
            _bottom ??= VideoPlayerBottom(
              mvModel: this.widget.mvModel,
            );
            _playerUI = widget;
            if (!mounted) return;
            setState(() {});
          }
        });
    VideoPlayerUtils.positionListener(
        key: this,
        listener: (state) {
          setState(() {});
        });
  }

  String formatLikeCount(int count) {
    if (count < 1000) {
      // 如果小于1000，直接返回数字
      return count.toString();
    } else if (count < 10000) {
      // 如果小于10000，转换为k格式
      double kCount = count / 1000;
      return kCount.toStringAsFixed(1) + 'k';
    } else {
      // 如果大于等于10000，转换为w格式
      double wCount = count / 10000;
      return wCount.toStringAsFixed(1) + 'w';
    }
  }

  @override
  void dispose() {
    // TODO: implement dispose
    VideoPlayerUtils.removeInitializedListener(this);
    VideoPlayerUtils.removePositionListener(this);
    VideoPlayerUtils.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: _isFullScreen ? Colors.black : Colors.white,
      appBar: _isFullScreen
          ? null
          : AppBar(
        backgroundColor: Colors.white70,
        title: Text(
          '${widget.mvModel.name} - ${widget.mvModel.artistName}',
          style: const TextStyle(
            color: Colors.black,
            fontSize: 18,
          ),
          overflow: TextOverflow.ellipsis,
        ),
      ),
      body: PopScope(
        onPopInvoked: (t) {
          VideoPlayerUtils.setPortrait();
        },
        child: _isFullScreen
            ? safeAreaPlayerUI()
            : Container(
          margin: EdgeInsets.only(
            top: _isFullScreen ? 0 : 5,
            bottom: _isFullScreen ? 0 : 5,
            left: _isFullScreen ? 0 : 2,
            right: _isFullScreen ? 0 : 2,
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              safeAreaPlayerUI(),
              const SizedBox(
                height: 10,
              ),
              ApiDio.mvCommentList.isEmpty
                  ? Text('  相关音乐推荐：',
                  style: TextStyle(
                      fontSize: 18, fontWeight: FontWeight.bold))
                  : Text('  热门评论：',
                  style: TextStyle(
                      fontSize: 18, fontWeight: FontWeight.bold)),
              const SizedBox(
                height: 2,
              ),
              Expanded(
                child: ApiDio.mvCommentList.isEmpty
                    ? SearchResultPage(
                  searchWord: widget.mvModel.name,
                  isVideo: true,
                )
                    : Container(
                  padding: const EdgeInsets.all(10),
                  child: ListView.builder(
                    itemCount: ApiDio.mvCommentList.length,
                    itemBuilder: (context, index) {
                      return ListTile(
                        isThreeLine: true,
                        contentPadding: const EdgeInsets.symmetric(
                            horizontal: 8.0, vertical: 2),
                        leading: ClipRRect(
                          borderRadius: BorderRadius.circular(10),
                          //child: Image.network(ApiDio.commentList[index].user.avatarUrl.toString()),
                          child: ExtendedImage.network(
                            ApiDio
                                .mvCommentList[index].user.avatarUrl
                                .toString(),
                            fit: BoxFit.cover,
                            alignment: Alignment.topLeft,
                            cache: true,
                            loadStateChanged:
                                (ExtendedImageState state) {
                              switch (
                              state.extendedImageLoadState) {
                                case LoadState.loading:
                                  return Image.asset(
                                    "assets/app.png",
                                    fit: BoxFit.fill,
                                  );
                                case LoadState.failed:
                                  return GestureDetector(
                                    child: Stack(
                                      fit: StackFit.expand,
                                      children: <Widget>[
                                        Image.asset(
                                          "assets/app.png",
                                          fit: BoxFit.fill,
                                        ),
                                        const Positioned(
                                          bottom: 0.0,
                                          left: 0.0,
                                          right: 0.0,
                                          child: Text(
                                            "load image failed, click to reload",
                                            textAlign:
                                            TextAlign.center,
                                          ),
                                        )
                                      ],
                                    ),
                                    onTap: () {
                                      state.reLoadImage();
                                    },
                                  );
                                case LoadState.completed:
                                  null;
                              }
                              return null;
                            },
                          ),
                        ),
                        title: Text(
                          '${ApiDio.mvCommentList[index].user.nickname}   ${ApiDio.mvCommentList[index].timeStr}',
                          style: const TextStyle(
                              fontSize: 15, color: Colors.black),
                        ),
                        subtitle: Column(
                          // 使用Column来包含文本和点赞量
                          crossAxisAlignment:
                          CrossAxisAlignment.start,
                          children: <Widget>[
                            Text(
                                ApiDio.mvCommentList[index].content,
                                style:
                                const TextStyle(fontSize: 12)),
                            Row(
                              // 添加点赞量
                              children: <Widget>[
                                const Icon(Icons.favorite_rounded,
                                    size: 16, color: Colors.red),
                                Text(
                                    ' ${formatLikeCount(ApiDio.mvCommentList[index].likedCount)}', // 假设likeCount是点赞数量
                                    style: const TextStyle(
                                        fontSize: 12,
                                        color: Colors.grey))
                              ],
                            ),
                          ],
                        ),
                        onTap: () {
                          setState(() {});
                        },
                      );
                    },
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget safeAreaPlayerUI() {
    return SafeArea(
      // 全屏的安全区域
      top: !_isFullScreen,
      bottom: !_isFullScreen,
      left: !_isFullScreen,
      right: !_isFullScreen,
      child: SizedBox(
          height: _height,
          width: _width,
          child: _playerUI != null
              ? VideoPlayerGestures(
            appearCallback: (appear) {
              _top!.opacityCallback(appear);
              _lockIcon!.opacityCallback(appear);
              _bottom!.opacityCallback(appear);
            },
            children: [
              Container(
                color: Colors.black26,
                child: Center(
                  child: _playerUI,
                ),
              ),
              _top!,
              _lockIcon!,
              _bottom!
            ],
          )
              : Container(
            alignment: Alignment.center,
            color: Colors.black26,
            child: const CircularProgressIndicator(
              strokeWidth: 3,
            ),
          )),
    );
  }
}
import 'dart:math';

import 'package:audioplayers/audioplayers.dart';
import 'package:oktoast/oktoast.dart';
import 'package:vocabulary/tools/sqlite_tools.dart';

import '../model/music.dart';
import 'get_source_tools.dart';

class AudioPlayerUtil {
  static MusicModel? get musicModel => _instance._musicModel; // 当前播放的音频模型
  static PlayerState get state => _instance._state; // 当前播放状态
  static Duration get position => _instance._position; // 当前音频播放进度
  static bool get isListPlayer => _instance._isListPlayer; // 当前是否是列表播放
  static List<MusicModel> get list => _instance._musicModels;
  static NextState get nextState => _instance._nextState;

  /// 添加音频模型
  static void addMusicModel({required MusicModel models}) {
    for (MusicModel model in _instance._musicModels) {
      if (model.id == models.id) {
        return;
      }
    }
    _instance._musicModels.add(models);
  }

  /// 删除音频模型
  static void removeMusicModel({required MusicModel model}) {
    _instance._musicModels.remove(model);
  }

  /// 添加音频模型-下一首播放
  static void addMusicModelNext({required MusicModel models}) {
    for (MusicModel model in _instance._musicModels) {
      if (model.id == models.id) {
        return;
      }
    }
    showToast('下一首播放');
    _instance._musicModels.insert(
        _instance._musicModels.indexOf(_instance._musicModel!) + 1, models);
  }

  static void playerHandle({required MusicModel model}) {
    if (_instance._musicModel == null) {
      // 播放新的音频
      _instance._playNewAudio(model);
      _instance._isListPlayer = false; // 关闭列表播放
    } else {
      if (_instance._musicModel!.mp3Url == model.mp3Url) {
        // 继续当前资源进行播放or暂停
        if (_instance._state == PlayerState.playing) {
          _instance._audioPlayer.pause();
        } else {
          _instance._audioPlayer.resume();
        }
      } else {
        // 播放新的音频
        _instance._playNewAudio(model);
        _instance._isListPlayer = false; // 关闭列表播放
      }
    }
  }

  // 列表播放
  static Future<void> listPlayerHandle(
      {required List<MusicModel> musicModels, MusicModel? musicModel}) async {
    if (musicModels.isEmpty) {
      _instance._musicModels = musicModels;
    } else {
      if (_instance._musicModel == musicModel) {
        _instance._audioPlayer.pause();
      } else {
        if (musicModel != null) {
          // 指定播放列表中某个曲子。自动开启列表播放
          _instance._playNewAudio(musicModel);
          _instance._musicModels = musicModels;
          _instance._isListPlayer = true;
        } else {
          if (_instance._isListPlayer == true) {
            // 列表已经开启过。此处破；判断暂停、播放
            if (_instance._state == PlayerState.playing) {
              _instance._audioPlayer.pause();
            } else {
              _instance._audioPlayer.resume();
            }
          } else {
            // 开启列表播放,从0开始
            _instance._playNewAudio(musicModels.first);
            _instance._musicModels = musicModels;
            _instance._isListPlayer = true;
          }
        }
      }
    }
  }

  static void changeNextState(NextState nextState) {
    _instance._nextState = nextState;
  }

  static List<int> _generateUniqueRandomIndices(int length) {
    List<int> indices = List.generate(length, (index) => index + 1);
    var random = Random();
    indices.shuffle(random);
    return indices;
  }

  // 上一曲 ，只在列表播放时有效
  static void previousMusic() {
    if (_instance._isListPlayer == false) return;
    switch (_instance._nextState) {
      case NextState.sequential:
        int index = _instance._musicModels.indexOf(_instance._musicModel!);
        if (index == 0) {
          index = _instance._musicModels.length - 1;
        } else {
          index -= 1;
        }
        _instance._playNewAudio(_instance._musicModels[index]);
        break;

      case NextState.random:
        int randomIndex = Random().nextInt(_instance._musicModels.length);
        _instance._playNewAudio(_instance._musicModels[randomIndex]);
        break;

      case NextState.single:
        int index = _instance._musicModels.indexOf(_instance._musicModel!);
        if (index == 0) {
          index = _instance._musicModels.length - 1;
        } else {
          index -= 1;
        }
        _instance._playNewAudio(_instance._musicModels[index]);
        break;
    }
  }

  // 下一曲，只在列表播放时有效
  static void nextMusic() {
    if (_instance._isListPlayer == false) return;
    switch (_instance._nextState) {
      case NextState.sequential:
        int index = _instance._musicModels.indexOf(_instance._musicModel!);
        if (index == _instance._musicModels.length - 1) {
          // 最后一首
          index = 0;
        } else {
          index += 1;
        }
        _instance._playNewAudio(_instance._musicModels[index]);
        break;
      case NextState.random:
        int randomIndex = Random().nextInt(_instance._musicModels.length);
        _instance._playNewAudio(_instance._musicModels[randomIndex]);
        break;
      case NextState.single:
        int index = _instance._musicModels.indexOf(_instance._musicModel!);
        if (index == _instance._musicModels.length - 1) {
          // 最后一首
          index = 0;
        } else {
          index += 1;
        }
        _instance._playNewAudio(_instance._musicModels[index]);
        break;
    }
  }

  // 跳转到某一时段
  static void seekTo({required Duration position, required MusicModel model}) {
    if (_instance._musicModel == null) {
      // 先播放新的音频，再跳转
      _instance._playNewAudio(model);
      _instance._seekTo(position);
    } else {
      if (_instance._musicModel!.mp3Url == model.mp3Url) {
        // 继续当前资源进行播放or暂停
        _instance._seekTo(position);
      } else {
        // 播放新的音频
        _instance._playNewAudio(model);
        _instance._seekTo(position);
      }
    }
  }

  // 获取音频总时长
  static Future<Duration?> getAudioDuration({required String url}) async {
    AudioPlayer audioPlayer = AudioPlayer();
    await audioPlayer.setSource(UrlSource(url));
    return audioPlayer.getDuration();
  }

  // 播放状态监听
  static void statusListener(
      {required dynamic key, required Function(PlayerState) listener}) {
    ListenerStateModel model = ListenerStateModel.fromList([key, listener]);
    _instance._statusPool.add(model);
  }

  // 移除播放状态监听
  static void removeStatusListener(dynamic key) {
    _instance._statusPool.removeWhere((element) => element.key == key);
  }

  // 播放进度监听
  static void positionListener(
      {required dynamic key, required Function(int) listener}) {
    ListenerPositionModel model =
    ListenerPositionModel.fromList([key, listener]);
    _instance._positionPool.add(model);
  }

  // 移除播放进度监听
  static void removePositionListener(dynamic key) {
    _instance._positionPool.removeWhere((element) => element.key == key);
  }

  // 底部显示tip监听
  static void showListener({required dynamic key, required Function listener}) {
    ListenerShowModel model = ListenerShowModel.fromList([key, listener]);
    _instance._showPool.add(model);
  }

  // 移除底部显示tip监听
  static void removeShowListener(dynamic key) {
    _instance._showPool.removeWhere((element) => element.key == key);
  }

  // 设置音量
  static Future<void> setVolume(double volume) async {
    await _instance._audioPlayer.setVolume(volume);
  }

  // 设置播放速度
  static Future<void> setSpeed(double speed) async {
    await _instance._audioPlayer.setPlaybackRate(speed);
  }

  // 释放资源
  static void dispose() {
    _instance._audioPlayer.release();
    _instance._audioPlayer.dispose();
    _instance._showPool.clear();
    _instance._positionPool.clear();
    _instance._statusPool.clear();
    _instance._musicModel = null;
    _instance._state = PlayerState.stopped;
    _instance._stopPosition = false;
    _instance._position = const Duration(seconds: 0);
    if (_instance._show) {
      _instance._show = false;
      _instance._showTipView(false);
    }
  }

  // ---------------------  private ------------------------
  static final AudioPlayerUtil _instance = AudioPlayerUtil._internal();
  factory AudioPlayerUtil() => _instance;
  AudioPlayerUtil._internal() {
    _statusPool = [];
    _positionPool = [];
    _showPool = [];
    _audioPlayer = AudioPlayer();
    // 状态监听
    _audioPlayer.onPlayerStateChanged.listen((PlayerState playerState) {
      switch (playerState) {
        case PlayerState.stopped:
        // TODO: Handle this case.
          _state = PlayerState.stopped;
          break;
        case PlayerState.playing:
        // TODO: Handle this case.
          _state = PlayerState.playing;
          break;
        case PlayerState.paused:
        // TODO: Handle this case.
          _state = PlayerState.paused;
          break;
        case PlayerState.completed:
        // TODO: Handle this case.
          _state = PlayerState.completed;
          break;
        case PlayerState.disposed:
          break;
      }
      _stateUpdate(_state);
    });

    // 播放进度监听
    _audioPlayer.onPositionChanged.listen((Duration p) {
      _position = p;
      if (p.inSeconds == _secondPosition || _stopPosition == true) return;
      _secondPosition = p.inSeconds;
      for (var element in _positionPool) {
        element.listener(p.inSeconds);
      }
    });

    // 播放结束
    _audioPlayer.onPlayerComplete.listen((_) {
      if (_isListPlayer == true) {
        // 开启列表播放后，自动下一曲
        if (_nextState == NextState.single) {
          int index = _instance._musicModels.indexOf(_instance._musicModel!);
          _instance._playNewAudio(_instance._musicModels[index]);
        } else {
          nextMusic();
        }
      } else {
        _state = PlayerState.completed;
        _stateUpdate(_state);
      }
    });

    // 播放错误
    _audioPlayer.onLog.listen((_) {
      _resetPlayer();
    });
  }

  PlayerState _state = PlayerState.stopped;
  late AudioPlayer _audioPlayer;
  MusicModel? _musicModel;
  // 创建播放状态监听池
  late List<ListenerStateModel> _statusPool;
  // 播放进度监听池
  late List<ListenerPositionModel> _positionPool;
  // show监听
  late List<ListenerShowModel> _showPool;
  bool _stopPosition = false; // 暂停进度监听，用于seekTo跳转播放缓冲时，Slider停止
  int _secondPosition = 0;
  Duration _position = const Duration(seconds: 0);
  bool _show = false;
  bool _isListPlayer = false;
  List<MusicModel> _musicModels = [];
  NextState _nextState = NextState.sequential;

  // 播放新音频
  void _playNewAudio(MusicModel model) async {
    try {
      await _audioPlayer.play(UrlSource(model.mp3Url));
      _musicModel = model;
      SqlTools.inTimeMusic(_musicModel!);
      ApiDio.getHistory();
      _showTipView(true);
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
    }
  }

  // 跳转
  void _seekTo(Duration position) async {
    _stopPosition = true;
    await _audioPlayer.seek(position);
    _stopPosition = false;
  }

  // 更新播放状态
  void _stateUpdate(PlayerState state) {
    _state = state;
    for (var element in _statusPool) {
      element.listener(state);
    }
  }

  // 开启底部显示tip
  void _showTipView(bool show) {
    _show = show;
    for (var element in _showPool) {
      element.listener(show);
    }
  }

  // 重置播放器
  void _resetPlayer() {
    if (_state == PlayerState.playing) {
      _audioPlayer.pause();
    }
    _audioPlayer.release();
    _secondPosition = 0;
    _state = PlayerState.stopped;
  }
}

// 播放状态监听模型
class ListenerStateModel {
  late dynamic key;

  /// 根据key标记是谁加入的通知，一般直接传widget就好
  late Function(PlayerState) listener;

  /// 简单写一个构造方法
  ListenerStateModel.fromList(List list) {
    key = list.first;
    listener = list.last;
  }
}

// 播放进度监听模型
class ListenerPositionModel {
  late dynamic key;

  /// 根据key标记是谁加入的通知，一般直接传widget就好
  late Function(int) listener;

  /// 简单写一个构造方法
  ListenerPositionModel.fromList(List list) {
    key = list.first;
    listener = list.last;
  }
}

// 底部showTip监听模型
class ListenerShowModel {
  late dynamic key;

  /// 根据key标记是谁加入的通知，一般直接传widget就好
  late Function(bool) listener;

  /// 简单写一个构造方法
  ListenerShowModel.fromList(List list) {
    key = list.first;
    listener = list.last;
  }
}

//枚举
enum NextState { sequential, random, single }
import 'dart:convert';

import 'package:dio/dio.dart';

import 'package:sqlite3/sqlite3.dart';
import 'package:vocabulary/model/comment.dart';
import 'package:vocabulary/model/music.dart';
import 'package:vocabulary/model/mv.dart';

import '../model/hot.dart';
import 'sqlite_tools.dart';

/// ApiDio类用于处理网络请求和数据存储
class ApiDio {
  /// 轮播图列表
  static List<String> ban = [];
  /// 热搜列表
  static List<HotModel> hotModelList = [];
  /// 音乐列表
  static List<MusicModel> musicSheetList = [];
  /// 搜索历史列表
  static List<String> searchList = [];
  /// 歌词映射表
  static Map<String, String> lyricsMap = {};
  /// MV列表
  static List<MvModel> newMvList = [];
  /// MVID列表
  static List<String> idList = [];
  /// Search MV ID
  static List<String> searchMVIDList = [];
  /// 随机音乐列表
  static List<MusicModel> randomList = [];
  /// 评论列表
  static List<CommentModel> commentList = [];
  /// 评论列表
  static List<CommentModel> mvCommentList = [];
  ///历史音乐列表
  static List<MusicModel> historyList = [];
  /// 我喜欢的列表
  static List<MusicModel> loveList = [];
  ///本地音乐列表
  static List<MusicModel> localList = [];
  /// 初始列表
  static List<MusicModel> startList = [];

  static List<MvModel> searchMvList = [];

  static List<MvModel> mvHistory = [];

  static List<String> historySuggest = [];

  static final Dio _dio = Dio();

  static final Database _database = sqlite3.open(SqlTools.fileSQL);

  // 获取搜索建议
  static Future<void> getSearchSuggest(String keyword) async {
    historySuggest.clear();
    try {
      Response response = await _dio.get('http://159.75.108.178:3000/search/suggest?keywords=$keyword&type=mobile');
      Map<String, dynamic> jsonMap = json.decode(response.toString());
      List<dynamic> list = jsonMap['result']['allMatch'];
      for (var item in list) {
        historySuggest.add(item['keyword'].toString());
      }
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
    }
  }


  /// 获取热搜
  /// 返回值：获取成功返回true，失败返回false
  static Future<bool> getHotList() async {
    Map<String, dynamic> jsonMap = {};
    try {
      Response response = await _dio.get("http://159.75.108.178:3000/search/hot/detail");
      jsonMap = json.decode(response.toString());
      List<dynamic> dataList = jsonMap['data'];
      hotModelList = dataList.map((item) {
        return HotModel.fromJson(item);
      }).toList();
      return true;
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
      return false;
    }
  }

  /// 根据关键词进行搜索
  /// [word]：搜索的关键词
  /// 返回值：搜索结果的字符串
  static Future<String> getSearch(String word) async {
    String res = '';
    try {
      Response response = await _dio.get("https://music.163.com/api/search/get/web?csrf_token=hlpretag=&hlposttag=&s=$word&type=1&offset=0&total=true&limit=25");
      res = response.toString();
      return res;
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
      return res;
    }
  }

  /// 根据歌曲ID获取MP3模型
  /// [id]：歌曲的ID
  /// 返回值：音乐模型对象
  // static Future<MusicModel> getNewMusic(int ids) async {
  //   String id = ids.toString();
  //   try {
  //     Response response = await Dio().get("https://api.injahow.cn/meting/?type=song&id=$id");
  //     List<dynamic> dataList = json.decode(response.toString());
  //     Map<String, dynamic> data = dataList[0];
  //
  //     RegExp regex = RegExp(r"id=(\d+)");
  //     Match match = regex.firstMatch(data['pic'].toString())!;
  //     String pic = match.group(1)!;
  //     print(data['pic'].toString()+'==========================');
  //     print(pic);
  //     String newPic = 'https://p3.music.126.net/HT4j0f5ETtAiOiCHcLYBww==/$pic.jpg';
  //     return MusicModel(id: ids, name: data['name'], author: data['artist'], picUrl: newPic, mp3Url: 'https://api.injahow.cn/meting/?server=netease&type=url&id=$id',);
  //   } catch (e) {
  //     DeBugMessage.addMistake(e.toString());
  //     return MusicModel(id: 1, name: '', author: '', picUrl: '', mp3Url: '');
  //   }
  // }

  /// 根据歌曲ID获取音乐信息
  /// [id]：歌曲的ID
  /// 返回值：音乐模型对象
  static Future<MusicModel> getMusic(int id) async {
    MusicModel music;
    print('=================================='+id.toString());
    try {
      Response response = await Dio().get("https://api.linhun.vip/api/wyyyy?id=${id.toString()}&apiKey=7fd47321de52414340f3535e40b6893d");
      Map<String, dynamic> mp3 = json.decode(response.toString());
      music = MusicModel(id: id, name: mp3['name'], author: mp3['author'], picUrl: mp3['img'], mp3Url: 'https://api.injahow.cn/meting/?server=netease&type=url&id=$id');
      return music;
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
      music = MusicModel(id:0 , name: '', author: '', picUrl: '', mp3Url: '');
      return music;
    }
  }

  /// 根据歌曲ID获取音乐信息
  /// [id]：歌曲的ID
  /// 返回值：音乐模型对象
  // static Future<String> getNewMusicUrl(int id) async {
  //   String music;
  //   try {
  //     Response response = await Dio().get("https://api.linhun.vip/api/wyyyy?id=${id.toString()}&apiKey=7fd47321de52414340f3535e40b6893d");
  //     Map<String, dynamic> mp3 = json.decode(response.toString());
  //     music = mp3['mp3'];
  //     return music;
  //   } catch (e) {
  //     DeBugMessage.addMistake(e.toString());
  //     music = '';
  //     return music;
  //   }
  // }


  /// 获取歌单推荐音乐列表
  static Future<void> getSheet() async {
    // 从数据库中随机获取推荐音乐列表
    var query = 'SELECT * FROM RecdMusicList ORDER BY RANDOM() LIMIT 10';
    var results = _database.select(query);

    musicSheetList.clear();

    for (var element in results) {
      musicSheetList.add(MusicModel(id: int.parse(element['id']), name: element['name'], author: element['artist'], picUrl: element['pic'], mp3Url: element['url']),);
    }
  }

  static Future<void> getMvHistory() async {
    var query = '''
      SELECT d1.*
      FROM mvHistory d1
      INNER JOIN (
        SELECT id, MAX(time) as maxTime
        FROM mvHistory
        GROUP BY id
      ) d2 ON d1.id = d2.id AND d1.time = d2.maxTime
      ORDER BY d1.time DESC
    ''';
    var results = _database.select(query);
    mvHistory.clear();
    for (var element in results) {
      Map<String, dynamic> map = jsonDecode(element['data'].toString());
      mvHistory.add(MvModel.fromJson(map));
    }
  }

  /// 获取歌单推荐音乐列表
  static Future<void> getHistory() async {
    var query = '''
      SELECT d1.*
      FROM history d1
      INNER JOIN (
        SELECT id, MAX(time) as maxTime
        FROM history
        GROUP BY id
      ) d2 ON d1.id = d2.id AND d1.time = d2.maxTime
      ORDER BY d1.time DESC
    ''';

    var results = _database.select(query);
    historyList.clear();
    for (var element in results) {
      historyList.add(MusicModel(id: int.parse(element['id']), name: element['name'], author: element['artist'], picUrl: element['pic'], mp3Url: element['url']),);
      //print(MusicModel(id: int.parse(element['id']), name: element['name'], author: element['artist'], picUrl: element['pic'], mp3Url: element['url']).toJson().toString());
    }
  }

  /// 获取我喜欢的音乐列表
  static Future<void> getLove() async {

    var query = 'SELECT DISTINCT * FROM love';
    var results = _database.select(query);

    loveList.clear();
    for (var element in results) {
      loveList.add(MusicModel(id: int.parse(element['id']), name: element['name'], author: element['artist'], picUrl: element['pic'], mp3Url: element['url']),);
    }
  }

  /// 获取本地音乐
  static Future<void> getDownload() async {

    var query = 'SELECT * FROM download';
    var results = _database.select(query);

    localList.clear();
    for (var element in results) {
      localList.add(MusicModel(id: int.parse(element['id']), name: element['name'], author: element['artist'], picUrl: element['pic'], mp3Url: element['url']),);
    }
  }

  /// 根据MV ID获取MV的URL
  /// [id]：MV的ID
  /// 返回值：MV的URL字符串
  static Future<String> getMvURL(String id) async {
    try {
      Response response = await _dio.post("http://music.163.com/api/mv/detail?id=$id&type=mp4");
      Map<String, dynamic> mp4 = json.decode(response.toString());
      Map<String, dynamic> dataUrl = mp4['data']['brs'];
      List<String> resolutions = ['1080', '720', '480', '240'];
      String url = '';
      for (String resolution in resolutions) {
        if (dataUrl.containsKey(resolution)) {
          if (resolution == '1080') {
            url = dataUrl['1080'].toString();
          } else if (resolution == '720') {
            url = dataUrl['720'].toString();
          } else if (resolution == '480') {
            url = dataUrl['480'].toString();
          } else if (resolution == '240') {
            url = dataUrl['240'].toString();
          }
          break;
        }else{
          continue;
        }
      }
      return url;
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
      return '';
    }
  }

  /// 获取搜索历史关键词列表
  static Future<void> getSearchWord() async {
    // 从数据库中获取搜索历史关键词
    var query = 'SELECT DISTINCT word FROM searchWordTime';
    var results = _database.select(query);
    searchList.clear();

    for (var element in results) {
      searchList.add(element['word']);
    }
  }

  /// 获取轮播图片列表
  static Future<bool> getBan() async{
    try {
      Response response = await _dio.get("http://159.75.108.178:3000/banner?type=1");
      Map<String, dynamic> mp3 = json.decode(response.toString());
      List<dynamic> banList = mp3['banners'];

      for (Map<String, dynamic> bans in banList){
        ban.add(bans['pic']);
      }
      return true;
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
      return false;
    }
  }

  /// 获取指定歌曲的歌词
  /// [id]：歌曲的ID
  static Future<void> getWord(String id) async{
    try {
      Response response = await _dio.get('https://music.163.com/api/song/lyric?id=$id&lv=1&kv=1&tv=-1');
      Map<String, dynamic> map = json.decode(response.toString());
      String lrc = map['lrc']['lyric'];
      lyricsMap.clear();
      lyricsMap = getLyric(lrc);
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
      return;
    }
  }

  /// 从歌词字符串中解析出时间戳和歌词内容，并存储到lyricsMap中
  static Map<String, String> getLyric(String lyrics)  {
    Map<String, String> lyricsMap = {};
    final regex = RegExp(r'\[(\d+:\d+\.\d+)\](.*)');
    for (final match in regex.allMatches(lyrics)) {
      // 提取时间戳和歌词
      final timestamp = match.group(1)!;
      final line = match.group(2);
      // 只保留分钟和秒
      final minSec = timestamp.split('.')[0];
      // 添加到Map中
      lyricsMap[minSec] = line!;
    }
    return lyricsMap;
  }

  /// 获取随机推荐音乐
  /// 返回值：音乐模型对象
  static Future<void> getRandomMusic(int i) async{
    try {
      while(i>0){
        Response response = await _dio.get('https://api.vvhan.com/api/wyMusic/%E7%83%AD%E6%AD%8C%E6%A6%9C?type=json');
        Map<String, dynamic> map = json.decode(response.toString());
        Map<String, dynamic> rand = map['info'];
        if(rand['url'] == 'https://music.163.com/404'){
          continue;
        }else{
          randomList.add(MusicModel(id: rand['id'], name: rand['name'].toString(), author: rand['auther'].toString(), picUrl: rand['picUrl'], mp3Url: 'https://api.injahow.cn/meting/?server=netease&type=url&id=${rand['id']}'));
          i = i-1;
        }
      }
      if(randomList.length > 3){
        randomList.removeAt(0);
      }
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
    }
  }

  /// 获取MvId
  static Future<void> getNewMvId() async{
    newMvList.clear();
    try {
      idList.clear();
      Response response = await _dio.get('http://159.75.108.178:3000/top/mv?limit=10');
      Map<String, dynamic> map = json.decode(response.toString());
      List<dynamic> rand = map['data'];
      for (var element in rand) {
        String id = element['id'].toString();
        idList.add(id);
      }
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
    }
  }

  /// 获取MvId
  static Future<void> getSearchMvId(String word) async{
    searchMVIDList.clear();
    try {
      searchMVIDList.clear();
      Response response = await _dio.get('https://api.linhun.vip/api/wyymv?name=$word&apiKey=7a5bf162a5ba66958d31c89d4320f39c');
      Map<String, dynamic> map = json.decode(response.toString());
      List<dynamic> rand = map['data'];
      for (var element in rand) {
        String id = element['id'].toString();
        searchMVIDList.add(id);
      }
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
    }
  }


  /// 获取MV
  static Future<void> getNewMV() async {
    try {
      newMvList.clear();
      for(String id in idList){
        Response response = await _dio.post("http://music.163.com/api/mv/detail?id=$id&type=mp4");
        Map<String, dynamic> mp4 = json.decode(response.toString());
        Map<String, dynamic> rand = mp4['data'];
        newMvList.add(MvModel.fromJson(rand));
      }
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
    }
  }

  /// 获取MV
  static Future<void> getSearchMV() async {
    try {
      searchMvList.clear();
      int num = 0;
      for(String id in searchMVIDList){
        num = num + 1;
        Response response = await _dio.post("http://music.163.com/api/mv/detail?id=$id&type=mp4");
        Map<String, dynamic> mp4 = json.decode(response.toString());
        Map<String, dynamic> rand = mp4['data'];
        searchMvList.add(MvModel.fromJson(rand));
        print(searchMvList);
        if(num == 9) return;
      }
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
    }
  }

  /// 获取音乐评论
  static Future<void> getComment(String id) async {
    try {
      commentList.clear();
      Response response = await _dio.get('http://music.163.com/api/v1/resource/comments/R_SO_4_$id?limit=20&offset=0');
      Map<String, dynamic> map = json.decode(response.toString());
      List<dynamic> rand = map['hotComments'];
      for (var element in rand) {
        commentList.add(CommentModel.fromJson(element));
      }
    } catch (e) {
      //DeBugMessage.addMistake(e.toString());
    }
  }

  /// 获取MV评论
  static Future<void> getMvComment(String id) async {
    try {
      mvCommentList.clear();
      Response response = await _dio.get('http://159.75.108.178:3000/comment/mv?id=$id');
      Map<String, dynamic> map = json.decode(response.toString());
      List<dynamic> rand = map['hotComments'];
      for (var element in rand) {
        mvCommentList.add(CommentModel.fromJson(element));
      }
    }catch (e) {
      //DeBugMessage.addMistake(e.toString());
      try{
        mvCommentList.clear();
        Response response = await _dio.get('http://159.75.108.178:3000/comment/mv?id=$id&realIP=159.75.108.178');
        Map<String, dynamic> map = json.decode(response.toString());
        List<dynamic> rand = map['hotComments'];
        for (var element in rand) {
          mvCommentList.add(CommentModel.fromJson(element));
        }
      } catch (e) {
        //DeBugMessage.addMistake(e.toString());
      }
    }
  }
}

import 'package:permission_handler/permission_handler.dart';

class PermissionUtils {
  static Future<bool> requestAllPermission() async {
    Map<Permission, PermissionStatus> permission = await [
      Permission.photos,
      Permission.speech,
      Permission.storage,
      Permission.phone,
      Permission.notification,
    ].request();
    if (await Permission.photos.isGranted) {
      return true;
    } else {}
    if (await Permission.speech.isGranted) {
      return true;
    } else {}
    if (await Permission.storage.isGranted) {
      return true;
    } else {}
    if (await Permission.phone.isGranted) {
      return true;
    } else {}
    if (await Permission.notification.isGranted) {
      return true;
    } else {}
    return false;
  }

  static Future<bool> requestPhotosPermission() async {
    if (await Permission.photos.isGranted) {
      print("照片权限申请通过");
      return true;
    } else {
      print("照片权限申请失败");
    }
    return false;
  }

  static Future<bool> requestSpeechPermission() async {
    if (await Permission.speech.isGranted) {
      print("语音权限申请通过");
      return true;
    } else {
      print("语音权限申请失败");
    }
    return false;
  }

  static Future<bool> requestStoragePermission() async {
    if (await Permission.storage.isGranted) {
      print("文件权限申请通过");
      return true;
    } else {
      print("文件权限申请失败");
    }
    return false;
  }

  static Future<bool> requestPhonePermission() async {
    if (await Permission.phone.isGranted) {
      print("手机权限申请通过");
      return true;
    } else {
      print("手机权限申请失败");
    }
    return false;
  }

  static Future<bool> requestNotificationPermission() async {
    if (await Permission.notification.isGranted) {
      print("通知权限申请通过");
      return true;
    } else {
      print("通知权限申请失败");
    }
    return false;
  }
}
import 'package:shared_preferences/shared_preferences.dart';

class DataUtils {
  static late final SharedPreferences _spf;

  static Future<void> init() async {
    _spf = await SharedPreferences.getInstance();
  }

  static bool hasKey(String key) => _spf.getKeys().contains(key);

  static Set<String> getKeys() => _spf.getKeys();

  static dynamic get(String key) => _spf.get(key);

  static String? getString(String key) => _spf.getString(key);

  static void putString(String key, String value) => _spf.setString(key, value);

  static bool? getBool(String key) => _spf.getBool(key);

  static void putBool(String key, bool value) => _spf.setBool(key, value);

  static int? getInt(String key) => _spf.getInt(key);

  static void putInt(String key, int value) => _spf.setInt(key, value);

  static double? getDouble(String key) => _spf.getDouble(key);

  static void putDouble(String key, double value) => _spf.setDouble(key, value);

  static List<String>? getStringList(String key) => _spf.getStringList(key);

  static void putStringList(String key, List<String> value) =>
      _spf.setStringList(key, value);

  static dynamic getDynamic(String key) => _spf.get(key);

  static Future<bool> saveThemeColorIndex(int value) =>
      _spf.setInt('key_theme_color', value);

  static int getThemeColorIndex() => _spf.getInt('key_theme_color') ?? 0;

  static void remove(String key) => _spf.remove(key);

  static void clear() => _spf.clear();
}
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/services.dart';
import 'package:oktoast/oktoast.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqlite3/sqlite3.dart';
import 'package:vocabulary/model/music.dart';
import 'package:vocabulary/model/mv.dart';

import 'sharedPreferences_tools.dart';

class SqlTools {
  static String fileSQL =
      "/data/user/0/com.vocabulary.vocabulary/files/ok.sqlite";

  static Future<bool> fileExists(String filePath) async {
    return File(filePath).exists();
  }

  static Future<void> readAndWriteImage() async {
    String fileName = "ok.sqlite";
    String dir = (await getApplicationSupportDirectory()).path;
    fileSQL = "$dir/$fileName";
    bool isFirstLaunch = !DataUtils.hasKey('launchedBefore');
    if (isFirstLaunch) {
      print('首次启动！！！！');
      DataUtils.putBool('launchedBefore', true);
      var bytes = await rootBundle.load("assets/recMusic.sqlite");
      ByteBuffer buffer = bytes.buffer;
      File file = await File(fileSQL).writeAsBytes(
          buffer.asUint8List(bytes.offsetInBytes, bytes.lengthInBytes));
    }
  }

  static final Database _database = sqlite3.open(fileSQL);

  static void inMvHistory(MvModel model){
    DateTime now = DateTime.now();
    String currentTime = now.millisecondsSinceEpoch.toString();
    String data = jsonEncode(model.toJson());
    var insertStatement = _database.prepare('''
      INSERT OR REPLACE INTO mvHistory (data,id,time)
      VALUES (?,?,?)
    ''');
    insertStatement.execute([data,model.id.toString(),currentTime]);
  }

  static void inSearch(String word) {
    var insertStatement = _database.prepare('''
      INSERT OR REPLACE INTO searchWordTime (word)
      VALUES (?)
    ''');
    insertStatement.execute([word]);
  }

  static void inTimeMusic(MusicModel model) {
    DateTime now = DateTime.now();
    String currentTime = now.millisecondsSinceEpoch.toString(); // 将当前时间转换为字符串
    var insertStatement = _database.prepare('''
      INSERT OR REPLACE INTO history (id, name, artist, pic, lrc, url, time)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    ''');
    insertStatement.execute([
      model.id,
      model.name,
      model.author,
      model.picUrl,
      '',
      model.mp3Url,
      currentTime
    ]);
  }

  static void inLoveMusic(MusicModel model) {
    DateTime now = DateTime.now();
    String currentTime = now.millisecondsSinceEpoch.toString(); // 将当前时间转换为字符串

    var insertStatement = _database.prepare('''
      INSERT OR REPLACE INTO love (id, name, artist, pic, lrc, url, time)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    ''');
    insertStatement.execute([
      model.id,
      model.name,
      model.author,
      model.picUrl,
      '',
      model.mp3Url,
      currentTime
    ]);
    showToast('已填加至收藏');
  }

  static void inDownload(MusicModel model) {
    DateTime now = DateTime.now();
    String currentTime = now.millisecondsSinceEpoch.toString(); // 将当前时间转换为字符串

    if (isLocal(model.id.toString())) {
      showToast('已下载');
    } else {
      var insertStatement = _database.prepare('''
      INSERT OR REPLACE INTO download (id, name, artist, pic, lrc, url, time)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    ''');
      insertStatement.execute([
        model.id,
        model.name,
        model.author,
        model.picUrl,
        '',
        model.mp3Url,
        currentTime
      ]);
      showToast('下载完成');
    }
  }

  static Future<void> deSearch() async {
    _database.execute('DELETE FROM searchWordTime');
    showToast('删除成功');
  }

  static void deTime(String id) {
    var deleteStatement = _database.prepare('''
    DELETE FROM history WHERE id = ?
  ''');
    // 执行删除操作，传入ID参数
    deleteStatement.execute([id]);
    showToast('删除成功');
  }

  static void deLocal(String id) {
    // 准备删除语句
    var deleteStatement = _database.prepare('''
    DELETE FROM download WHERE id = ?
  ''');
    // 执行删除操作，传入ID参数
    deleteStatement.execute([id]);
    showToast('删除成功');
  }

  static void deLove(String id) {
    // 准备删除语句
    var deleteStatement = _database.prepare('''
    DELETE FROM love WHERE id = ?
  ''');
    // 执行删除操作，传入ID参数
    deleteStatement.execute([id]);
    showToast('删除成功');
  }

  static void deMv(String id) {
    // 准备删除语句
    var deleteStatement = _database.prepare('''
    DELETE FROM mvHistory WHERE id = ?
  ''');
    // 执行删除操作，传入ID参数
    deleteStatement.execute([id]);
    showToast('删除成功');
  }

  static bool isLoveMusic(String id) {
    // 准备查询语句
    var queryStatement = _database.prepare('''
    SELECT * FROM love WHERE id = ?
  ''');
    // 执行查询操作，传入ID参数
    var result = queryStatement.select([id]);
    return result.isNotEmpty;
  }

  static bool isLocal(String id) {
    // 准备查询语句
    var queryStatement = _database.prepare('''
    SELECT * FROM download WHERE id = ?
  ''');
    // 执行查询操作，传入ID参数
    var result = queryStatement.select([id]);
    return result.isNotEmpty;
  }
}
import 'dart:math';

void main() {
  // 创建一个Random对象实例
  final random = Random();

  // 生成一个六位的随机数
  // 100000是最小的六位数，999999是最大的六位数
  int randomNumber = 100000 + random.nextInt(900000); // 从100000到999999的范围中生成随机数

  print(randomNumber); // 输出六位随机数
}
import 'dart:io';

import 'package:auto_orientation/auto_orientation.dart';
import 'package:brightness_volume/brightness_volume.dart';
import 'package:flutter/material.dart';

import 'package:flutter/services.dart';
import 'package:video_player/video_player.dart';

import '../model/TempOther.dart';

class VideoPlayerUtils {
  ///  ---------------------  public -------------------------

  static String get url => _instance._url; // 当前播放的url
  static VideoPlayerState get state => _instance._state; // 当前播放状态
  static bool get isInitialized => _instance._isInitialized; // 视频是否已经完成初始化
  static Duration get duration => _instance._duration; // 视频总时长
  static Duration get position => _instance._position; // 当前视频播放进度
  static double get aspectRatio => _instance._aspectRatio; // 视频播放比例

  // 播放、暂停、切换视频等播放操作
  static void playerHandle(String url,
      {bool autoPlay = true, bool looping = false}) async {
    if (url == _instance._url) {
      //
      if (_instance._controller!.value.isPlaying) {
        // 播放中，点击暂停
        await _instance._controller!.pause();
        _instance._updatePlayerState(VideoPlayerState.paused);
      } else {
        //  暂停中，点击播放
        await _instance._controller!.play();
        _instance._updatePlayerState(VideoPlayerState.playing);
      }
    } else {
      // 新的播放
      if (url.isEmpty) return;
      // 重置播放器
      _instance._resetController();
      _instance._controller = VideoPlayerController.network(url);
      try {
        await _instance._controller!.initialize();
        _instance._isInitialized = true;
        _instance._url = url;
        _instance._controller!.addListener(_instance._positionListener);
        _instance._duration = _instance._controller!.value.duration;
        _instance._aspectRatio = _instance._controller!.value.aspectRatio;
        // 更新初始化结果
        _instance._updateInitialize(true);
        if (autoPlay == true) {
          await _instance._controller!.play();
          _instance._updatePlayerState(VideoPlayerState.playing);
        }
        if (looping == true) {
          _instance._controller!.setLooping(looping);
        }
      } catch (_) {
        _instance._initializeError();
      }
    }
  }

  // 跳转播放
  static void seekTo({required Duration position}) async {
    if (_instance._controller == null || _instance._url.isEmpty) return;
    _instance._stopPosition = true;
    await _instance._controller!.seekTo(position);
    _instance._stopPosition = false;
  }

  // 初始化结果监听，回调2个参数：1、初始化是否成功，2、播放的widget，方便setState()
  static void initializedListener(
      {required dynamic key, required Function(bool, Widget) listener}) {
    ListenerInitializeModel model =
    ListenerInitializeModel.fromList([key, listener]);
    _instance._initializedPool.add(model);
  }

  // 移除初始化结果监听
  static void removeInitializedListener(dynamic key) {
    _instance._initializedPool.removeWhere((element) => element.key == key);
  }

  // 播放状态监听
  static void statusListener(
      {required dynamic key, required Function(VideoPlayerState) listener}) {
    ListenerStateModel model = ListenerStateModel.fromList([key, listener]);
    _instance._statusPool.add(model);
  }

  // 移除播放状态监听
  static void removeStatusListener(dynamic key) {
    _instance._statusPool.removeWhere((element) => element.key == key);
  }

  // 播放进度监听
  static void positionListener(
      {required dynamic key, required Function(int) listener}) {
    ListenerPositionModel model =
    ListenerPositionModel.fromList([key, listener]);
    _instance._positionPool.add(model);
  }

  // 移除播放进度监听
  static void removePositionListener(dynamic key) {
    _instance._positionPool.removeWhere((element) => element.key == key);
  }

  // 获取音量
  static Future<double> getVolume() async {
    return await BVUtils.volume;
  }

  // 设置音量
  static Future<void> setVolume(double volume) async {
    return await BVUtils.setVolume(volume);
  }

  // 获取亮度
  static Future<double> getBrightness() async {
    return await BVUtils.brightness;
  }

  // 设置亮度
  static Future<void> setBrightness(double brightness) async {
    return await BVUtils.setBrightness(brightness);
  }

  // 设置播放速度
  static Future<void> setSpeed(double speed) async {
    return _instance._controller!.setPlaybackSpeed(speed);
  }

  // 设置是否循环播放
  static Future<void> setLooping(bool looping) async {
    return _instance._controller!.setLooping(looping);
  }

  // 设置横屏
  static setLandscape() {
    AutoOrientation.landscapeAutoMode();
    // iOS13+横屏时，状态栏自动隐藏，可自定义：https://juejin.cn/post/7054063406579449863
    if (Platform.isAndroid) {
      ///关闭状态栏，与底部虚拟操作按钮
      SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: []);
    }
  }

  // 设置竖屏
  static setPortrait() {
    AutoOrientation.portraitAutoMode();
    if (Platform.isAndroid) {
      ///显示状态栏，与底部虚拟操作按钮
      SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual,
          overlays: [SystemUiOverlay.top, SystemUiOverlay.bottom]);
    }
  }

  // 简单处理下时间格式化mm:ss （超过1小时可自行处理hh:mm:ss）
  static String formatDuration(int second) {
    int min = second ~/ 60;
    int sec = second % 60;
    String minString = min < 10 ? "0$min" : min.toString();
    String secString = sec < 10 ? "0$sec" : sec.toString();
    return minString + ":" + secString;
  }

  // 释放资源
  static dispose() {
    if (_instance._state == VideoPlayerState.playing) {
      _instance._controller?.pause();
    }
    _instance._url = "";
    _instance._statusPool.clear();
    _instance._positionPool.clear();
    _instance._initializedPool.clear();
    _instance._initializedPool.clear();
    TempValue.isLocked = false;
    _instance._state = VideoPlayerState.stopped;
    _instance._isInitialized = false;
    _instance._duration = const Duration(seconds: 0);
    _instance._secondPosition = 0;
    _instance._position = const Duration(seconds: 0);
    _instance._aspectRatio = 1.0;
    _instance._stopPosition = false;
    if (_instance._controller != null) {
      _instance._controller = null;
    }
  }

  ///  ---------------------  private ------------------------

  String _url = "";
  VideoPlayerController? _controller;
  VideoPlayerState _state = VideoPlayerState.stopped;
  bool _isInitialized = false;
  Duration _duration = const Duration(seconds: 0);
  int _secondPosition = 0;
  Duration _position = const Duration(seconds: 0);
  double _aspectRatio = 1.0;
  bool _stopPosition = false; // 暂停进度监听，用于seekTo跳转播放缓冲时，Slider停止

  static final VideoPlayerUtils _instance = VideoPlayerUtils._internal();
  factory VideoPlayerUtils() => _instance;
  VideoPlayerUtils._internal() {
    _statusPool = [];
    _positionPool = [];
    _initializedPool = [];
  }
  // 初始化结果监听池
  late List<ListenerInitializeModel> _initializedPool;
  // 创建播放状态监听池
  late List<ListenerStateModel> _statusPool;
  // 播放进度监听池
  late List<ListenerPositionModel> _positionPool;

  // 更新初始化结果
  void _updateInitialize(initialize) {
    _isInitialized = initialize;
    for (var element in _initializedPool) {
      Widget widget = const SizedBox();
      if (initialize == true) {
        widget = AspectRatio(
          aspectRatio: _aspectRatio,
          child: VideoPlayer(_controller!),
        );
      }
      element.listener(initialize, widget);
    }
  }

  // 播放监听器，这里主要监听播放进度
  // 因为播放进度可能在1秒内更新几次，取个巧，进度更新超过1秒再同步更新进度状态
  void _positionListener() {
    if (_stopPosition) return;
    _position = _controller!.value.position;
    int second = _controller!.value.position.inSeconds;
    if (_controller!.value.position == _duration) {
      // 播放结束
      if (_state != VideoPlayerState.completed) {
        // 保证结束回调只会调用一次
        _updatePlayerState(VideoPlayerState.completed);
      }
    }
    // 保证1s内只会调用用一次
    if (_secondPosition == second) return;
    _secondPosition = second;
    for (var element in _positionPool) {
      element.listener(second);
    }
  }

  // 更新播放状态
  void _updatePlayerState(VideoPlayerState state) {
    _state = state;
    for (var element in _statusPool) {
      element.listener(state);
    }
  }

  // 重置播放器
  void _resetController() {
    if (_controller != null) {
      if (_controller!.value.isPlaying) {
        _controller!.pause();
      }
      _controller!.removeListener(_instance._positionListener);
      _controller!.dispose();
    }
    _url = "";
    _state = VideoPlayerState.stopped;
    _stopPosition = false;
  }

  // 初始化失败
  void _initializeError() {
    _state = VideoPlayerState.stopped;
    _updateInitialize(false);
  }
}

// 初始化结果监听模型
class ListenerInitializeModel {
  late dynamic key;

  /// 根据key标记是谁加入的通知，一般直接传widget就好
  late Function(bool, Widget) listener;

  /// 简单写一个构造方法
  ListenerInitializeModel.fromList(List list) {
    key = list.first;
    listener = list.last;
  }
}

// 播放状态监听模型
class ListenerStateModel {
  late dynamic key;

  /// 根据key标记是谁加入的通知，一般直接传widget就好
  late Function(VideoPlayerState) listener;

  /// 简单写一个构造方法
  ListenerStateModel.fromList(List list) {
    key = list.first;
    listener = list.last;
  }
}

// 播放进度监听模型
class ListenerPositionModel {
  late dynamic key;

  /// 根据key标记是谁加入的通知，一般直接传widget就好
  late Function(int) listener;

  /// 简单写一个构造方法
  ListenerPositionModel.fromList(List list) {
    key = list.first;
    listener = list.last;
  }
}

/// 播放状态枚举
enum VideoPlayerState {
  stopped, // 初始状态，已停止或发生错误
  playing, // 正在播放
  paused, // 暂停
  completed // 播放结束
}
import 'dart:ui' as ui;

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import '../model/music.dart';
import '../tools/audio_play_tools.dart';

class AudioSlider extends StatefulWidget {
  const AudioSlider({Key? key}) : super(key: key);

  @override
  State<AudioSlider> createState() => _AudioSliderState();
}

class _AudioSliderState extends State<AudioSlider> {
  late MusicModel musicModel = AudioPlayerUtil.musicModel!;
  double _value = 0.0;
  int _total = 0; // 假设总时间为
  String _totalDuration = "00:00";
  String _currentDuration = "00:00";
  ui.Image? _customImage; // 自定义thumbShape

  @override
  void initState() {
    super.initState();
    AudioPlayerUtil.statusListener(
        key: this,
        listener: (sate) {
          if (mounted) {
            setState(() {
              musicModel = AudioPlayerUtil.musicModel!;
            });
          }
        });
    AudioPlayerUtil.getAudioDuration(url: musicModel.mp3Url).then((duration) {
      if (duration!.inMilliseconds > 0) {
        _total = duration.inSeconds;
        if (mounted) {
          setState(() {
            _totalDuration = _updateDuration(duration.inSeconds);
            if (AudioPlayerUtil.musicModel != null) {
              if (AudioPlayerUtil.musicModel!.mp3Url == musicModel.mp3Url) {
                _value = AudioPlayerUtil.position.inSeconds / _total;
              }
            }
          });
        }
      }
      setState(() {});
    });
    loadImage().then((image) {
      _customImage = image;
      if (!mounted) return;
      setState(() {});
    });
    // 播放进度回调
    AudioPlayerUtil.positionListener(
        key: this,
        listener: (position) {
          if (_total == 0) return;
          if (AudioPlayerUtil.musicModel == null) return;
          if (AudioPlayerUtil.musicModel!.mp3Url != musicModel.mp3Url) return;
          if (mounted) {
            setState(() {
              _value = position / _total;
              _currentDuration = _updateDuration(position);
            });
          }
        });
  }

  Future<ui.Image> loadImage() async {
    ByteData data = await rootBundle.load("assets/images/image.png");
    ui.Codec codec = await ui.instantiateImageCodec(data.buffer.asUint8List());
    ui.FrameInfo fi = await codec.getNextFrame();
    return fi.image;
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.transparent,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            height: 24,
            child: SliderTheme(
              data: SliderThemeData(
                trackHeight: 4,
                inactiveTrackColor: Colors.grey,
                activeTrackColor: Colors.yellow,
                thumbShape: SliderThumbImage(image: _customImage),
                trackShape: const CustomTrackShape(),
              ),
              child: Slider(
                value: _value,
                onChangeStart: (double value) {
                  setState(() {
                    _value = value;
                  });
                },
                onChangeEnd: (double value) {
                  // 拖拽跳转
                  setState(() {
                    _value = value;
                  });
                  AudioPlayerUtil.seekTo(
                      position: Duration(seconds: (_value * _total).truncate()),
                      model: musicModel);
                },
                onChanged: (double value) {
                  setState(() {
                    _value = value;
                  });
                },
              ),
            ),
          ),
          Row(
            children: [
              Text(
                _currentDuration,
                style: const TextStyle(fontSize: 14, color: Colors.black87),
              ),
              const Spacer(),
              Text(
                _totalDuration,
                style: const TextStyle(fontSize: 14, color: Colors.black87),
              )
            ],
          )
        ],
      ),
    );
  }

  String _updateDuration(int second) {
    int min = second ~/ 60;
    int sec = second % 60;
    String minString = min < 10 ? "0$min" : min.toString();
    String secString = sec < 10 ? "0$sec" : sec.toString();
    return "$minString:$secString";
  }

  @override
  void dispose() {
    // TODO: implement dispose
    AudioPlayerUtil.removePositionListener(this);
    super.dispose();
  }
}

class SliderThumbImage extends SliderComponentShape {
  const SliderThumbImage({Key? key, this.image});
  final ui.Image? image;

  @override
  Size getPreferredSize(bool isEnabled, bool isDiscrete) {
    return const Size(0, 0);
  }

  @override
  void paint(PaintingContext context, Offset center,
      {required Animation<double> activationAnimation,
        required Animation<double> enableAnimation,
        required bool isDiscrete,
        required TextPainter labelPainter,
        required RenderBox parentBox,
        required SliderThemeData sliderTheme,
        required TextDirection textDirection,
        required double value,
        required double textScaleFactor,
        required Size sizeWithOverflow}) {
    final canvas = context.canvas;
    final imageWidth = image?.width ?? 10;
    final imageHeight = image?.height ?? 10;
    Offset imageOffset = Offset(
      center.dx - imageWidth * 0.5,
      center.dy - imageHeight * 0.5 - 2,
    );
    if (image != null) {
      canvas.drawImage(image!, imageOffset, Paint());
    }
  }
}

class CustomTrackShape extends RoundedRectSliderTrackShape {
  const CustomTrackShape();
  @override
  Rect getPreferredRect({
    required RenderBox parentBox,
    Offset offset = Offset.zero,
    required SliderThemeData sliderTheme,
    bool isEnabled = false,
    bool isDiscrete = false,
  }) {
    final double trackHeight = sliderTheme.trackHeight!;
    final double trackWidth = parentBox.size.width;
    final double trackLeft = offset.dx;
    final double trackTop =
        offset.dy + (parentBox.size.height - trackHeight) / 2;
    return Rect.fromLTWH(trackLeft, trackTop, trackWidth, trackHeight);
  }
}
import 'package:flutter/material.dart';

import 'package:card_swiper/card_swiper.dart';

import '../tools/get_source_tools.dart';


class BannerPage extends StatefulWidget {
  const BannerPage({super.key});

  @override
  _BannerPageState createState() => _BannerPageState();
}

class _BannerPageState extends State<BannerPage> {

  Future<void> init() async{
    await ApiDio.getBan();
    if (mounted) {
      setState(() {

      });
    }
  }

  @override
  void initState() {
    init();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return ApiDio.ban.isEmpty? Container() :Swiper(
      itemBuilder: (BuildContext context,int index){
        return Image.network(ApiDio.ban[index],fit: BoxFit.fill,);
      },
      itemCount: 8,
      loop: true,
      autoplay: true,
    );
  }
}

import 'package:audioplayers/audioplayers.dart';
import 'package:extended_image/extended_image.dart';
import 'package:flutter/material.dart';

import 'package:vocabulary/tools/audio_play_tools.dart';

import '../model/music.dart';
import '../tools/get_source_tools.dart';


class MusicCard extends StatefulWidget {
  const MusicCard({Key? key,required this.musicSheet, required this.isOne}) : super(key: key);

  final MusicModel musicSheet ;
  final bool isOne;

  @override
  _MusicCardState createState() => _MusicCardState();
}

class _MusicCardState extends State<MusicCard> {

  bool _playing = false;

  @override
  void initState() {
    super.initState();
    AudioPlayerUtil.statusListener(key: this, listener: (state) {
      if ((AudioPlayerUtil.musicModel != null) && (AudioPlayerUtil.musicModel!.mp3Url == widget.musicSheet.mp3Url)) { // 为当前资源
        if (mounted) {
          setState(() {
            _playing = (state == PlayerState.playing);
          });
        }
      } else { // 不是当前资源，若当前正在播放，则暂停
        if (_playing == true) {
          if (mounted) {
            setState(() {
              _playing = false;
            });
          }
        }
      }
    });
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size =MediaQuery.of(context).size;
    final width =size.width;
    return Card(
      color: Colors.white,
      margin: const EdgeInsets.only(
        left: 10,
        right: 10,
      ),
      elevation: 0,
      child: Container(
        color: Colors.white,
        width: width*0.36,
        height: width*0.48,
        child: Stack(
          children: [
            ClipRRect(
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(10.0),
                  topRight: Radius.circular(10.0),
                  bottomLeft: Radius.circular(10.0),
                  bottomRight: Radius.circular(10.0),
                ),
                child: Stack(
                  alignment: Alignment.center,
                  children: [
                    ExtendedImage.network(
                      widget.musicSheet.picUrl!,
                      fit: BoxFit.fill,
                      alignment: Alignment.topLeft,
                      cache: true,
                      loadStateChanged: (ExtendedImageState state) {
                        switch (state.extendedImageLoadState) {
                          case LoadState.loading:
                            return Image.asset(
                              "assets/app.png",
                              fit: BoxFit.fill,
                            );
                            break;
                          case LoadState.failed:
                            return GestureDetector(
                              child: Stack(
                                fit: StackFit.expand,
                                children: <Widget>[
                                  Image.asset(
                                    "assets/app.png",
                                    fit: BoxFit.fill,
                                  ),
                                  const Positioned(
                                    bottom: 0.0,
                                    left: 0.0,
                                    right: 0.0,
                                    child: Text(
                                      "load image failed, click to reload",
                                      textAlign: TextAlign.center,
                                    ),
                                  )
                                ],
                              ),
                              onTap: () {
                                state.reLoadImage();
                              },
                            );
                            break;
                          case LoadState.completed:
                            null;
                        }
                        return null;
                      },
                    ),
                    InkWell(
                      child: Container(
                        margin: const EdgeInsets.only(
                            right: 5,
                            bottom: 5
                        ),
                        child: Icon(
                            _playing?Icons.pause_circle_outline_rounded :Icons.play_circle_outline_rounded,
                            size: 66,
                            color: Colors.white70
                        ),
                      ),
                      onTap: () async {
                        ApiDio.getWord(widget.musicSheet.id.toString());
                        AudioPlayerUtil.listPlayerHandle(musicModels: ApiDio.musicSheetList, musicModel: widget.musicSheet);
                        ApiDio.getNewMV();
                      },
                    ),
                  ],
                )
            ),
            Column(
              children: [
                Expanded(
                  flex: 5,
                  child: Container(

                  ),
                ),
                Expanded(
                    flex: 2,
                    child: ClipRRect(
                      borderRadius: const BorderRadius.only(
                        bottomLeft: Radius.circular(10.0),
                        bottomRight: Radius.circular(10.0),
                      ),
                      child: Container(
                        alignment: Alignment.center,
                        color: Colors.transparent,
                        child: Row(
                          children: [
                            Expanded(
                              flex:10,
                              child: Container(
                                  alignment: Alignment.center,
                                  child: Text(widget.musicSheet.name,softWrap: true,
                                    overflow: TextOverflow.ellipsis,style: TextStyle(fontSize: 15),)
                              ),
                            ),
                          ],
                        ),
                      ),
                    )
                )
              ],
            ),
          ],
        ),
      ),

    );
  }
}


import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/material.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:oktoast/oktoast.dart';
import 'package:vocabulary/model/mv.dart';
import 'package:vocabulary/tools/get_source_tools.dart';

import 'package:vocabulary/tools/audio_play_tools.dart';
import 'package:vocabulary/tools/sqlite_tools.dart';
import '../model/music.dart';
import '../page/video_player_page.dart';

class MusicListWidget extends StatefulWidget {
  const MusicListWidget({Key? key,required this.state, required this.model}) : super(key: key);
  final int state;
  final MusicModel model;
  @override
  _MusicListWidgetState createState() => _MusicListWidgetState();
}

class _MusicListWidgetState extends State<MusicListWidget> {

  List<List<MusicModel>> title = [
    ApiDio.loveList,
    ApiDio.localList,
    ApiDio.historyList,
  ];

  bool _isPlaying = false;

  @override
  void initState() {
    super.initState();
    AudioPlayerUtil.positionListener(
        key: this,
        listener: (position) {
          setState(() {
            if(widget.model.id == AudioPlayerUtil.musicModel!.id){
              _isPlaying = true;
            }else{
              _isPlaying = false;
            }
          });
        });
  }

  @override
  void dispose() {
    super.dispose();
    AudioPlayerUtil.removePositionListener(this);
    AudioPlayerUtil.removeStatusListener(this);
  }

  @override
  Widget build(BuildContext context) {
    return _buildList(context);
  }

  Widget _buildList(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(2),
      child: Slidable(
        endActionPane: ActionPane(
          motion: ScrollMotion(),
          children: [
            SlidableAction(
              onPressed: (BuildContext context) async {
                setState(() {
                  if (widget.state == 2) {
                    SqlTools.deTime(widget.model.id.toString());
                    ApiDio.getHistory();
                    setState(() {});
                  } else if (widget.state == 0) {
                    SqlTools.deLove(widget.model.id.toString());
                    ApiDio.getLove();
                    setState(() {});
                  } else {
                    SqlTools.deLocal(widget.model.id.toString());
                    ApiDio.getDownload();
                    setState(() {});
                  }
                });
              },
              backgroundColor: Colors.redAccent,
              foregroundColor: Colors.white,
              icon: Icons.delete,
              label: widget.state == 1 ? '删除' : '移除',
            ),
            SlidableAction(
              onPressed: (BuildContext context) {
                if (widget.state == 1) {
                  showToast('已下载');
                } else {
                  SqlTools.inDownload(widget.model);
                  ApiDio.getDownload();
                  setState(() {});
                }
              },
              backgroundColor: const Color(0xFF0029A7),
              foregroundColor: Colors.white,
              icon: Icons.downloading_rounded,
              label: widget.state == 1 ? '下载' : '下载',
            ),
          ],
        ),
        child: ListTile(
          isThreeLine: true,
          dense: true,
          title: Text(
            widget.model.name,
            style: TextStyle(
                fontSize: 16,
                color: _isPlaying ? Colors.blue : Colors.black54),
          ),
          subtitle: Text(
            widget.model.author,
            style: const TextStyle(fontSize: 12),
          ),
          trailing: widget.state == 2
              ? IconButton(
              onPressed: () {
                if (SqlTools.isLoveMusic(
                    widget.model.id.toString())) {
                  SqlTools.deLove(
                      widget.model.id.toString());
                  ApiDio.getLove();
                  setState(() {});
                } else {
                  SqlTools.inLoveMusic(widget.model);
                  ApiDio.getLove();
                  setState(() {});
                }
              },
              icon: Icon(
                Icons.favorite,
                color: SqlTools.isLoveMusic(
                    widget.model.id.toString())
                    ? Colors.red
                    : Colors.grey,
              ))
              : Container(
            width: 0,
          ),
          onTap: () {
            AudioPlayerUtil.listPlayerHandle(
                musicModels: title[widget.state], musicModel: widget.model);
            setState(() {});
          },
        ),
      ),
    );
  }

}
import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/material.dart';
import 'package:vocabulary/model/mv.dart';
import 'package:vocabulary/tools/get_source_tools.dart';

import 'package:vocabulary/tools/audio_play_tools.dart';
import 'package:vocabulary/tools/sqlite_tools.dart';
import '../page/video_player_page.dart';

class MvCard extends StatefulWidget {
  MvCard({Key? key, required this.mvSheet, this.isHistory = false}) : super(key: key);

  final MvModel mvSheet;

  final bool isHistory;

  @override
  _MvCardState createState() => _MvCardState();
}

class _MvCardState extends State<MvCard> {

  late String url;

  void getUrl(){
    List<String> resolutions = ['1080', '720', '480', '240'];
    for (String resolution in resolutions) {
      if (widget.mvSheet.brs.containsKey(resolution)) {
        if (resolution == '1080') {
          url = widget.mvSheet.brs['1080'].toString();
        } else if (resolution == '720') {
          url = widget.mvSheet.brs['720'].toString();
        } else if (resolution == '480') {
          url = widget.mvSheet.brs['480'].toString();
        } else if (resolution == '240') {
          url = widget.mvSheet.brs['240'].toString();
        }
        break;
      }else{
        continue;
      }
    }
    setState(() {

    });
  }

  String historyUrl = '';

  @override
  void initState() {
    getUrl();
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final width = size.width;
    return Card(
      color: Colors.white,
      margin: const EdgeInsets.only(
        left: 10,
        right: 10,
      ),
      elevation: 0,
      child: Container(
        color: Colors.white,
        width: width * 0.88,
        height: width * 0.618,
        child: Stack(
          children: [
            ClipRRect(
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(10.0),
                topRight: Radius.circular(10.0),
                bottomLeft: Radius.circular(10.0),
                bottomRight: Radius.circular(10.0),
              ),
              child: InkWell(
                onTap: () async {
                  await ApiDio.getMvURL(widget.mvSheet.id.toString())
                      .then((value) {
                        print('------------------------------------------------$value');
                    historyUrl = value;
                  });
                  if (AudioPlayerUtil.state == PlayerState.playing) {
                    AudioPlayerUtil.listPlayerHandle(
                        musicModels: AudioPlayerUtil.list);
                  }
                  SqlTools.inMvHistory(widget.mvSheet);
                  Navigator.of(context).push(MaterialPageRoute(
                    builder: (context) => VideoPlayerPage(
                      mvModel: widget.mvSheet,
                      url: historyUrl,
                    ),
                  ));
                },
                child: Column(
                  children: [
                    Expanded(
                      flex: 13,
                      child: ClipRRect(
                        borderRadius: const BorderRadius.only(
                          topLeft: Radius.circular(10.0),
                          topRight: Radius.circular(10.0),
                          bottomLeft: Radius.circular(10.0),
                          bottomRight: Radius.circular(10.0),
                        ),
                        child: Image.network(
                          widget.mvSheet.cover,
                          fit: BoxFit.fill,
                        ),
                      ),
                    ),
                    Expanded(
                      flex: 3,
                      child: Container(
                        color: Colors.transparent,
                        child: Row(
                          children: [
                            Expanded(
                              flex: 10,
                              child: Container(
                                alignment: Alignment.topCenter,
                                child: Center(
                                  child: Text(
                                    '${widget.mvSheet.name} - ${widget.mvSheet.artistName}',
                                    style: const TextStyle(fontSize: 15),
                                    softWrap: true,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    )
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
import 'dart:ui';

import 'package:audioplayers/audioplayers.dart';
import 'package:extended_image/extended_image.dart';
import 'package:flutter/material.dart';

import 'package:vocabulary/tools/audio_play_tools.dart';

import '../Page/music_comment.dart';
import '../model/music.dart';
import '../tools/get_source_tools.dart';
import '../tools/sqlite_tools.dart';

class CardChildPage extends StatefulWidget {
  const CardChildPage({
    Key? key,
  }) : super(key: key);
  @override
  _CardChildPageState createState() => _CardChildPageState();
}

class _CardChildPageState extends State<CardChildPage> {

  bool _playing = (AudioPlayerUtil.state == PlayerState.playing);
  late MusicModel musicModel;

  late final ScrollController _scrollController;
  bool opened = false;

  String currentDuration = "00:00";
  bool isLove = false;

  void init() {
    isLove = SqlTools.isLoveMusic(musicModel.id.toString());
  }

  @override
  void initState() {
    musicModel = AudioPlayerUtil.musicModel!;
    init();
    super.initState();
    _scrollController = ScrollController();
    ApiDio.getWord(AudioPlayerUtil.musicModel!.id.toString());
    AudioPlayerUtil.statusListener(
        key: this,
        listener: (sate) {
          if (mounted) {
            setState(() {
              musicModel = AudioPlayerUtil.musicModel!;
            });
          }
        });
    AudioPlayerUtil.positionListener(
        key: this,
        listener: (position) {
          init();
          musicModel = AudioPlayerUtil.musicModel!;
          _playing = (AudioPlayerUtil.state == PlayerState.playing);
          currentDuration = _updateDuration(position);
          ApiDio.getWord(AudioPlayerUtil.musicModel!.id.toString());
          List<String> keys = ApiDio.lyricsMap.keys.toList(); // 将键转换为列表
          int index = keys.indexOf(currentDuration.toString()); // 找到键的索引
          if (index != -1) {
            scrollToIndex(index);
          }
          setState(() {});
        });
  }

  String _updateDuration(int second) {
    int min = second ~/ 60;
    int sec = second % 60;
    String minString = min < 10 ? "0$min" : min.toString();
    String secString = sec < 10 ? "0$sec" : sec.toString();
    return "$minString:$secString";
  }

  @override
  void dispose() {
    super.dispose();
    _scrollController.dispose();
    AudioPlayerUtil.removePositionListener(this);
    AudioPlayerUtil.removeStatusListener(this);
  }

  void scrollToIndex(int index) {
    const itemExtent = 36.0; // 每个item的高度
    _scrollController.animateTo(index * itemExtent,
        duration: const Duration(milliseconds: 500), curve: Curves.easeInOut);
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final width = size.width;
    final height = size.height;
    return Center(
      child: ClipRRect(
        borderRadius: const BorderRadius.all(Radius.circular(10.0)),
        child: Container(
          height: height * 0.80,
          width: width * 0.83,
          color: Colors.grey.shade100,
          child: Column(
            children: [
              ClipRRect(
                  borderRadius: const BorderRadius.all(Radius.circular(10.0)),
                  child: ExtendedImage.network(
                    musicModel.picUrl!,
                    width: width * 0.83,
                    height: width * 0.83,
                    fit: BoxFit.fill,
                    cache: true,
                    loadStateChanged: (ExtendedImageState state) {
                      switch (state.extendedImageLoadState) {
                        case LoadState.loading:
                          return Image.asset(
                            "assets/music.gif",
                          );
                        case LoadState.failed:
                          return GestureDetector(
                            child: Stack(
                              fit: StackFit.expand,
                              children: <Widget>[
                                Image.asset(
                                  "assets/failed.jpg",
                                  fit: BoxFit.fill,
                                ),
                                const Positioned(
                                  bottom: 0.0,
                                  left: 0.0,
                                  right: 0.0,
                                  child: Text(
                                    "load image failed, click to reload",
                                    textAlign: TextAlign.center,
                                  ),
                                )
                              ],
                            ),
                            onTap: () {
                              state.reLoadImage();
                            },
                          );
                        case LoadState.completed:
                          null;
                      }
                      return null;
                    },
                  )),
              const SizedBox(
                height: 5,
              ),
              Column(
                children: [
                  Text(
                    textAlign: TextAlign.center,
                    musicModel.name,
                    style: const TextStyle(
                        fontSize: 22, fontWeight: FontWeight.bold),
                  ),
                  Text(
                    musicModel.author,
                    style: const TextStyle(
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
              SizedBox(
                height: height * 0.17,
                child: ListWheelScrollView(
                  controller: _scrollController,
                  perspective: 0.01,
                  itemExtent: 36,
                  useMagnifier: true,
                  magnification: 1.5,
                  children: ApiDio.lyricsMap.entries
                      .map((value) => _buildItem(value.value))
                      .toList(),
                ),
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  IconButton(
                    icon: isLove
                        ? const Icon(
                            Icons.favorite_rounded,
                            size: 34,
                            color: Colors.red,
                          )
                        : const Icon(
                            Icons.favorite,
                            size: 34,
                          ),
                    onPressed: () async {
                      if (isLove) {
                        SqlTools.deLove(musicModel.id.toString());
                        isLove = false;
                        ApiDio.getLove();
                        setState(() {});
                      } else {
                        SqlTools.inLoveMusic(musicModel);
                        isLove = true;
                        ApiDio.getLove();
                        setState(() {});
                      }
                    },
                  ),
                  SizedBox(
                    width: width * 0.05,
                  ),
                  IconButton(
                    icon: Icon(
                      _playing
                          ? Icons.pause_circle_filled_rounded
                          : Icons.play_circle_filled_rounded,
                      size: 66,
                      color: Colors.green,
                    ),
                    onPressed: () async {
                      print('==============================================');
                      print(musicModel.id);
                      AudioPlayerUtil.playerHandle(model: musicModel);
                      musicModel = AudioPlayerUtil.musicModel!;
                      await ApiDio.getWord(
                          AudioPlayerUtil.musicModel!.id.toString());
                      setState(() {
                        _playing =
                            (AudioPlayerUtil.state == PlayerState.playing);
                      });
                    },
                  ),
                  SizedBox(
                    width: width * 0.05,
                  ),
                  IconButton(
                    icon: const Icon(
                      Icons.comment_rounded,
                      size: 34,
                    ),
                    onPressed: () async {
                      await ApiDio.getComment(ApiDio.randomList[ApiDio.randomList.length-2].id.toString());
                      Navigator.of(context).push(MaterialPageRoute(
                        builder: (context) => CommentList(musicModel: musicModel),
                      ));
                    },
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildItem(String text) {
    return Center(
      child: Text(
        text,
        style: const TextStyle(fontSize: 10),
        softWrap: true,
      ),
    );
  }
}
import 'package:audioplayers/audioplayers.dart';
import 'package:extended_image/extended_image.dart';
import 'package:flutter/material.dart';

import 'package:vocabulary/tools/audio_play_tools.dart';

import '../model/music.dart';
import '../tools/get_source_tools.dart';

class ResultCard extends StatefulWidget {
  const ResultCard({Key? key, required this.musicSheet}) : super(key: key);

  final MusicModel musicSheet;
  @override
  _ResultCardState createState() => _ResultCardState();
}

class _ResultCardState extends State<ResultCard> {
  bool _playing = false;

  @override
  void initState() {
    super.initState();
    AudioPlayerUtil.statusListener(
        key: this,
        listener: (state) {
          if ((AudioPlayerUtil.musicModel != null) &&
              (AudioPlayerUtil.musicModel!.mp3Url ==
                  widget.musicSheet.mp3Url)) {
            // 为当前资源
            if (mounted) {
              setState(() {
                _playing = (state == PlayerState.playing);
              });
            }
          } else {
            // 不是当前资源，若当前正在播放，则暂停
            if (_playing == true) {
              if (mounted) {
                setState(() {
                  _playing = false;
                });
              }
            }
          }
        });
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final width = size.width;
    return Center(
      child: Card(
        color: Colors.white,
        margin: const EdgeInsets.only(
          left: 10,
          right: 10,
        ),
        elevation: 0,
        child: Container(
          color: Colors.white,
          width: width * 0.60,
          height: width * 0.80,
          child: Stack(
            children: [
              ClipRRect(
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(10.0),
                    topRight: Radius.circular(10.0),
                    bottomLeft: Radius.circular(10.0),
                    bottomRight: Radius.circular(10.0),
                  ),
                  child: Stack(
                    alignment: Alignment.center,
                    children: [
                      ExtendedImage.network(
                        widget.musicSheet.picUrl!,
                        fit: BoxFit.fill,
                        alignment: Alignment.topLeft,
                        cache: true,
                        loadStateChanged: (ExtendedImageState state) {
                          switch (state.extendedImageLoadState) {
                            case LoadState.loading:
                              return Image.asset(
                                "assets/app.png",
                                fit: BoxFit.fill,
                              );
                              break;
                            case LoadState.failed:
                              return GestureDetector(
                                child: Stack(
                                  fit: StackFit.expand,
                                  children: <Widget>[
                                    Image.asset(
                                      "assets/app.png",
                                      fit: BoxFit.fill,
                                    ),
                                    const Positioned(
                                      bottom: 0.0,
                                      left: 0.0,
                                      right: 0.0,
                                      child: Text(
                                        "load image failed, click to reload",
                                        textAlign: TextAlign.center,
                                      ),
                                    )
                                  ],
                                ),
                                onTap: () {
                                  state.reLoadImage();
                                },
                              );
                              break;
                            case LoadState.completed:
                              null;
                          }
                          return null;
                        },
                      ),
                      InkWell(
                        child: Container(
                          margin: const EdgeInsets.only(right: 5, bottom: 5),
                          child: Icon(
                              _playing
                                  ? Icons.pause_circle_outline_rounded
                                  : Icons.play_circle_outline_rounded,
                              size: 88,
                              color: Colors.white60),
                        ),
                        onTap: () async {
                          ApiDio.getWord(widget.musicSheet.id.toString());
                          AudioPlayerUtil.playerHandle(
                              model: widget.musicSheet);
                        },
                      ),
                    ],
                  )),
              Column(
                children: [
                  Expanded(
                    flex: 5,
                    child: Container(),
                  ),
                  Expanded(
                      flex: 2,
                      child: ClipRRect(
                        borderRadius: const BorderRadius.only(
                          bottomLeft: Radius.circular(10.0),
                          bottomRight: Radius.circular(10.0),
                        ),
                        child: Container(
                          alignment: Alignment.center,
                          color: Colors.transparent,
                          child: Row(
                            children: [
                              Expanded(
                                flex: 10,
                                child: Container(
                                    alignment: Alignment.center,
                                    child: Text(
                                      '${widget.musicSheet.name}-${widget.musicSheet.author}',
                                      softWrap: true,
                                      overflow: TextOverflow.ellipsis,
                                      style: const TextStyle(fontSize: 18),
                                    )),
                              ),
                            ],
                          ),
                        ),
                      ))
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

import 'package:flutter/material.dart';
import 'package:vocabulary/model/mv.dart';
import 'package:vocabulary/widget/video_player_slider.dart';

import '../model/TempOther.dart';
import '../tools/videos_play_tools.dart';

// ignore: must_be_immutable
class VideoPlayerBottom extends StatefulWidget {
  VideoPlayerBottom({Key? key, required this.mvModel}) : super(key: key);
  late Function(bool) opacityCallback;

  MvModel mvModel;
  @override
  _VideoPlayerBottomState createState() => _VideoPlayerBottomState();
}

class _VideoPlayerBottomState extends State<VideoPlayerBottom> {
  double _opacity = TempValue.isLocked ? 0.0 : 1.0; // 不能固定值，横竖屏触发会重置
  bool get _isFullScreen =>
      MediaQuery.of(context).orientation == Orientation.landscape;
  late Map<String, String> clarityMap;
  late MvModel model;
  late String nowBrs;

  @override
  void initState() {
    super.initState();
    model = widget.mvModel;
    clarityMap = model.brs;
    nowBrs = clarityMap.values.last;
    widget.opacityCallback = (appear) {
      _opacity = appear ? 1.0 : 0.0;
      if (!mounted) return;
      setState(() {});
    };
  }

  @override
  Widget build(BuildContext context) {
    return Positioned(
      bottom: 0,
      right: 0,
      left: 0,
      child: AnimatedOpacity(
        opacity: _opacity,
        duration: const Duration(milliseconds: 250),
        child: Container(
          width: double.maxFinite,
          height: 40,
          padding: const EdgeInsets.only(right: 10),
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              // 来点黑色到透明的渐变优雅一下
              begin: Alignment.bottomCenter,
              end: Alignment.topCenter,
              colors: [Color.fromRGBO(0, 0, 0, .7), Color.fromRGBO(0, 0, 0, 0)],
            ),
          ),
          child: Row(
            children: [
              const VideoPlayerButton(),
              const Expanded(
                child: VideoPlayerSlider(),
              ),
              Text(
                "/${VideoPlayerUtils.formatDuration(VideoPlayerUtils.duration.inSeconds)}",
                style: const TextStyle(color: Colors.white, fontSize: 15),
              ),
              IconButton(
                padding: EdgeInsets.zero,
                onPressed: () {
                  if (_isFullScreen) {
                    VideoPlayerUtils.setPortrait();
                  } else {
                    VideoPlayerUtils.setLandscape();
                  }
                },
                icon: Icon(
                  _isFullScreen ? Icons.fullscreen_exit : Icons.fullscreen,
                  color: Colors.white,
                  size: 32,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  List<PopupMenuItem<String>> buildClarityItems() {
    return clarityMap.keys
        .toList()
        .map((String clarity) => PopupMenuItem<String>(
              value: clarity,
              child: Wrap(
                spacing: 1,
                alignment: WrapAlignment.center,
                children: <Widget>[
                  clarityMap[clarity] == nowBrs
                      ? Text(
                          clarity,
                          style: const TextStyle(color: Colors.red, fontSize: 15),
                        )
                      : Text(clarity),
                ],
              ),
            ))
        .toList();
  }
}

class VideoPlayerButton extends StatefulWidget {
  const VideoPlayerButton({Key? key}) : super(key: key);
  @override
  _VideoPlayerButtonState createState() => _VideoPlayerButtonState();
}

class _VideoPlayerButtonState extends State<VideoPlayerButton>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;

  @override
  void initState() {
    // TODO: implement initState
    _animationController = AnimationController(
        vsync: this, duration: const Duration(milliseconds: 250));
    if (VideoPlayerUtils.state == VideoPlayerState.playing) {
      _animationController.forward();
    }
    super.initState();

    ///播放状态监听
    VideoPlayerUtils.statusListener(
        key: this,
        listener: (state) {
          if (state == VideoPlayerState.playing) {
            _animationController.forward();
          } else {
            _animationController.reverse();
          }
        });
  }

  @override
  void dispose() {
    VideoPlayerUtils.removeStatusListener(this);
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 5),
      child: IconButton(
        padding: EdgeInsets.zero,
        onPressed: () => VideoPlayerUtils.playerHandle(VideoPlayerUtils.url),
        icon: AnimatedIcon(
          icon: AnimatedIcons.play_pause,
          progress: _animationController,
          color: Colors.white,
          size: 32,
        ),
      ),
    );
  }
}

import 'package:flutter/material.dart';

import '../model/TempOther.dart';

class LockIcon extends StatefulWidget {
  LockIcon({Key? key, required this.lockCallback}) : super(key: key);
  final Function lockCallback;
  late Function(bool) opacityCallback;
  @override
  _LockIconState createState() => _LockIconState();
}

class _LockIconState extends State<LockIcon> {
  double _opacity = 1.0;
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    widget.opacityCallback = (appear) {
      if (TempValue.isLocked) return; // 如果当前isLocked，不会触发，防止快速点击误触
      _opacity = appear ? 1.0 : 0.0;
      if (!mounted) return;
      setState(() {});
    };
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedOpacity(
      opacity: _opacity,
      duration: const Duration(milliseconds: 250),
      child: Align(
        alignment: Alignment.centerLeft,
        child: IconButton(
          padding: EdgeInsets.zero,
          onPressed: () {
            TempValue.isLocked = !TempValue.isLocked;
            widget.lockCallback();
            if (!mounted) return;
            setState(() {});
          },
          icon: Icon(
            TempValue.isLocked ? Icons.lock_outlined : Icons.lock_open_outlined,
            color: Colors.white,
            size: 25,
          ),
        ),
      ),
    );
  }
}

class VideoPlayerGestures extends StatefulWidget {
  const VideoPlayerGestures(
      {Key? key, required this.children, required this.appearCallback})
      : super(key: key);
  final List<Widget> children;
  final Function(bool) appearCallback;
  @override
  _VideoPlayerGesturesState createState() => _VideoPlayerGesturesState();
}

class _VideoPlayerGesturesState extends State<VideoPlayerGestures> {
  bool _appear = true; // 控件隐藏与显示
  Timer? _timer;
  double _width = 0.0; // 组件宽度
  double _height = 0.0; // 组件高度
  late Offset _startPanOffset; //  滑动的起始位置
  late double _movePan; // 滑动的偏移量累计总和
  bool _brightnessOk = false; // 是否允许调节亮度
  bool _volumeOk = false; // 是否允许调节亮度
  bool _seekOk = false; // 是否允许调节播放进度
  double _brightnessValue = 0.0; // 设备当前的亮度
  double _volumeValue = 0.0; // 设备本身的音量
  Duration _positionValue = const Duration(seconds: 0); // 当前播放时间，以计算手势快进或快退
  late PercentageWidget _percentageWidget; // 快退、快进、音量、亮度的百分比，手势操作时显示的widget
  final List<Widget> _children = [];
  @override
  void initState() {
    // TODO: implement initState
    _percentageWidget = PercentageWidget();
    _children.addAll(widget.children);
    _children.add(_percentageWidget);
    super.initState();
    _setInit();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: _onTap, // 单击上下widget隐藏与显示
      onDoubleTap: _onDoubleTap, // 双击暂停、播放
      onVerticalDragStart: _onVerticalDragStart, // 根据起始位置。确定是调整亮度还是调整声音
      onVerticalDragUpdate: _onVerticalDragUpdate, // 一般在更新的时候，同步调整亮度或声音
      onVerticalDragEnd: _onVerticalDragEnd, // 结束后，隐藏百分比提示信息widget
      onHorizontalDragStart: _onHorizontalDragStart, // 手势跳转播放起始位置
      onHorizontalDragUpdate: _onHorizontalDragUpdate, // 根据手势更新快进或快退
      onHorizontalDragEnd: _onHorizontalDragEnd, // 手势结束seekTo
      child: Container(
        // 保证手势全屏
        width: double.maxFinite,
        height: double.maxFinite,
        color: Colors.transparent,
        child: Stack(
          children: _children,
        ),
      ),
    );
  }

  void _setInit() async {
    _volumeValue = await VideoPlayerUtils.getVolume();
    _brightnessValue = await VideoPlayerUtils.getBrightness();
  }

  void _onTap() {
    if (TempValue.isLocked) return;
    _appear = !_appear;
    widget.appearCallback(_appear);
    // 开启定时器，已经显示并且正在播放，才会在3s后自动隐藏（偷个懒，用户单击过以后才会触发这类效果）
    if (_appear == true && VideoPlayerUtils.state == VideoPlayerState.playing) {
      _setupTimer();
    }
  }

  void _onDoubleTap() {
    if (TempValue.isLocked) return;
    VideoPlayerUtils.playerHandle(VideoPlayerUtils.url);
  }

  void _onVerticalDragStart(DragStartDetails details) {
    if (TempValue.isLocked) return;
    if (!VideoPlayerUtils.isInitialized) return;
    _resetPan();
    _startPanOffset = details.globalPosition;
    if (_startPanOffset.dx < _width * 0.5) {
      // 左边调整亮度
      _brightnessOk = true;
    } else {
      // 右边调整声音
      _volumeOk = true;
    }
  }

  void _onVerticalDragUpdate(DragUpdateDetails details) {
    if (TempValue.isLocked) return;
    // 累计计算偏移量(下滑减少百分比，上滑增加百分比)
    _movePan += (-details.delta.dy);
    if (_startPanOffset.dx < (_width / 2)) {
      if (_brightnessOk) {
        double b = _getBrightnessValue();
        _percentageWidget.percentageCallback("亮度：${(b * 100).toInt()}%");
        VideoPlayerUtils.setBrightness(b);
      }
    } else {
      if (_volumeOk) {
        double v = _getVolumeValue();
        _percentageWidget.percentageCallback("音量：${(v * 100).toInt()}%");
        VideoPlayerUtils.setVolume(v);
      }
    }
  }

  void _onVerticalDragEnd(_) {
    if (TempValue.isLocked) return;
    // 隐藏
    _percentageWidget.offstageCallback(true);
    if (_volumeOk) {
      _volumeValue = _getVolumeValue();
      _volumeOk = false;
    } else if (_brightnessOk) {
      _brightnessValue = _getBrightnessValue();
      _brightnessOk = false;
    }
  }

  void _onHorizontalDragStart(DragStartDetails details) {
    if (TempValue.isLocked) return;
    if (!VideoPlayerUtils.isInitialized) return;
    _resetPan();
    _positionValue = VideoPlayerUtils.position;
    _seekOk = true;
  }

  void _onHorizontalDragUpdate(DragUpdateDetails details) {
    if (TempValue.isLocked) return;
    if (!_seekOk) return;
    _movePan += details.delta.dx;
    double value = _getSeekValue();
    String currentSecond = VideoPlayerUtils.formatDuration(
        (value * VideoPlayerUtils.duration.inSeconds).toInt());
    if (_movePan >= 0) {
      _percentageWidget.percentageCallback("快进至：$currentSecond");
    } else {
      _percentageWidget.percentageCallback("快退至：$currentSecond");
    }
  }

  void _onHorizontalDragEnd(DragEndDetails details) {
    if (TempValue.isLocked) return;
    if (!_seekOk) return;
    double value = _getSeekValue();
    int seek = (value * VideoPlayerUtils.duration.inMilliseconds).toInt();
    VideoPlayerUtils.seekTo(position: Duration(milliseconds: seek));
    _percentageWidget.offstageCallback(true);
    _seekOk = false;
  }

  // 计算亮度百分比
  double _getBrightnessValue() {
    double value = double.parse(
        (_movePan / _height + _brightnessValue).toStringAsFixed(2));
    if (value >= 1.00) {
      value = 1.00;
    } else if (value <= 0.00) {
      value = 0.00;
    }
    return value;
  }

  // 计算声音百分比
  double _getVolumeValue() {
    double value =
        double.parse((_movePan / _height + _volumeValue).toStringAsFixed(2));
    if (value >= 1.0) {
      value = 1.0;
    } else if (value <= 0.0) {
      value = 0.0;
    }
    return value;
  }

  // 计算播放进度百分比
  double _getSeekValue() {
    // 进度条百分控制
    double valueHorizontal =
        double.parse((_movePan / _width).toStringAsFixed(2));
    // 当前进度条百分比
    double currentValue = _positionValue.inMilliseconds /
        VideoPlayerUtils.duration.inMilliseconds;
    double value =
        double.parse((currentValue + valueHorizontal).toStringAsFixed(2));
    if (value >= 1.00) {
      value = 1.00;
    } else if (value <= 0.00) {
      value = 0.00;
    }
    return value;
  }

  // 重置手势
  void _resetPan() {
    _startPanOffset = const Offset(0, 0);
    _movePan = 0;
    _width = context.size!.width;
    _height = context.size!.height;
  }

  // 开启定时器
  void _setupTimer() {
    _timer?.cancel();
    _timer = Timer(const Duration(seconds: 3), () {
      _appear = false;
      widget.appearCallback(_appear);
      _timer?.cancel();
    });
  }
}

// ignore: must_be_immutable
class PercentageWidget extends StatefulWidget {
  PercentageWidget({Key? key}) : super(key: key);
  late Function(String) percentageCallback; // 百分比
  late Function(bool) offstageCallback;
  @override
  _PercentageWidgetState createState() => _PercentageWidgetState();
}

class _PercentageWidgetState extends State<PercentageWidget> {
  String _percentage = ""; // 具体的百分比信息
  bool _offstage = true;
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    widget.percentageCallback = (percentage) {
      _percentage = percentage;
      _offstage = false;
      if (!mounted) return;
      setState(() {});
    };
    widget.offstageCallback = (offstage) {
      _offstage = offstage;
      if (!mounted) return;
      setState(() {});
    };
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Offstage(
        offstage: _offstage,
        child: Container(
          padding: const EdgeInsets.all(8.0),
          decoration: const BoxDecoration(
              color: Colors.black87,
              borderRadius: BorderRadius.all(Radius.circular(5.0))),
          child: Text(_percentage,
              style: const TextStyle(color: Colors.white, fontSize: 14)),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'dart:ui' as ui;

import 'package:flutter/services.dart';

import '../tools/videos_play_tools.dart';

class VideoPlayerSlider extends StatefulWidget {
  const VideoPlayerSlider({Key? key}) : super(key: key);
  @override
  _VideoPlayerSliderState createState() => _VideoPlayerSliderState();
}

class _VideoPlayerSliderState extends State<VideoPlayerSlider> {
  double _sliderValue = 0.0;
  String _currentDuration = "00:00";
  ui.Image? _customImage; // 自定义thumbShape
  bool _onChanged = false; // 是否正在拖拽

  @override
  void initState() {
    // 注意，切换横竖屏后，刷新widget，需将播放进度设置为当前position，而不是0
    if (VideoPlayerUtils.isInitialized) {
      _sliderValue = VideoPlayerUtils.position.inMilliseconds /
          VideoPlayerUtils.duration.inMilliseconds;
    }
    super.initState();
    VideoPlayerUtils.positionListener(
        key: this,
        listener: (seconds) {
          if (_onChanged == true) return;
          _currentDuration = VideoPlayerUtils.formatDuration(seconds);
          _sliderValue = seconds / VideoPlayerUtils.duration.inSeconds;
          if (!mounted) return;
          setState(() {});
        });
    loadImage().then((image) {
      _customImage = image;
      if (!mounted) return;
      setState(() {});
    });
  }

  @override
  Widget build(BuildContext context) {
    return _customImage == null
        ? const SizedBox()
        : Row(
            children: [
              Expanded(
                child: SliderTheme(
                  data: SliderThemeData(
                    trackHeight: 8,
                    inactiveTrackColor: Colors.grey,
                    activeTrackColor: Colors.greenAccent,
                    thumbShape: SliderThumbImage(image: _customImage),
                    trackShape: const CustomTrackShape(),
                  ),
                  child: Slider(
                    value: _sliderValue,
                    onChangeStart: (_) {
                      _onChanged = true;
                    },
                    onChangeEnd: (double value) {
                      _onChanged = false;
                      int millisecond =
                          (value * VideoPlayerUtils.duration.inMilliseconds)
                              .toInt();
                      VideoPlayerUtils.seekTo(
                          position: Duration(milliseconds: millisecond));
                    },
                    onChanged: (double value) {
                      int seconds =
                          (value * VideoPlayerUtils.duration.inSeconds).toInt();
                      _currentDuration =
                          VideoPlayerUtils.formatDuration(seconds);
                      _sliderValue = value;
                      if (!mounted) return;
                      setState(() {});
                    },
                  ),
                ),
              ),
              const SizedBox(
                width: 10,
              ),
              Text(
                _currentDuration,
                style: const TextStyle(color: Colors.white, fontSize: 15),
              )
            ],
          );
  }

  Future<ui.Image> loadImage() async {
    ByteData data = await rootBundle.load("assets/images/progress_icon.png");
    ui.Codec codec = await ui.instantiateImageCodec(data.buffer.asUint8List());
    ui.FrameInfo fi = await codec.getNextFrame();
    return fi.image;
  }

  @override
  void dispose() {
    // TODO: implement dispose
    VideoPlayerUtils.removePositionListener(this);
    super.dispose();
  }
}

class SliderThumbImage extends SliderComponentShape {
  const SliderThumbImage({Key? key, this.image});
  final ui.Image? image;

  @override
  Size getPreferredSize(bool isEnabled, bool isDiscrete) {
    return const Size(0, 0);
  }

  @override
  void paint(PaintingContext context, Offset center,
      {required Animation<double> activationAnimation,
      required Animation<double> enableAnimation,
      required bool isDiscrete,
      required TextPainter labelPainter,
      required RenderBox parentBox,
      required SliderThemeData sliderTheme,
      required TextDirection textDirection,
      required double value,
      required double textScaleFactor,
      required Size sizeWithOverflow}) {
    final canvas = context.canvas;
    final imageWidth = image?.width ?? 10;
    final imageHeight = image?.height ?? 10;
    Offset imageOffset = Offset(
      center.dx - imageWidth * 0.5,
      center.dy - imageHeight * 0.5 - 2,
    );
    if (image != null) {
      canvas.drawImage(image!, imageOffset, Paint());
    }
  }
}

class CustomTrackShape extends RoundedRectSliderTrackShape {
  const CustomTrackShape();
  @override
  Rect getPreferredRect({
    required RenderBox parentBox,
    Offset offset = Offset.zero,
    required SliderThemeData sliderTheme,
    bool isEnabled = false,
    bool isDiscrete = false,
  }) {
    final double trackHeight = sliderTheme.trackHeight!;
    final double trackWidth = parentBox.size.width;
    final double trackLeft = offset.dx;
    final double trackTop =
        offset.dy + (parentBox.size.height - trackHeight) / 2;
    return Rect.fromLTWH(trackLeft, trackTop, trackWidth, trackHeight);
  }
}

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

import '../model/TempOther.dart';
import '../tools/videos_play_tools.dart';

// ignore: must_be_immutable
class VideoPlayerTop extends StatefulWidget {
  VideoPlayerTop({Key? key, required this.title}) : super(key: key);
  late Function(bool) opacityCallback;
  late String title;
  @override
  _VideoPlayerTopState createState() => _VideoPlayerTopState();
}

class _VideoPlayerTopState extends State<VideoPlayerTop> {
  double _opacity = TempValue.isLocked ? 0.0 : 1.0; // 不能固定值，横竖屏触发会重置
  bool get _isFullScreen =>
      MediaQuery.of(context).orientation == Orientation.landscape;

  String title = '';
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    widget.opacityCallback = (appear) {
      _opacity = appear ? 1.0 : 0.0;
      if (!mounted) return;
      setState(() {});
    };
    title = widget.title;
  }

  @override
  Widget build(BuildContext context) {
    return Positioned(
      left: 0,
      top: 0,
      right: 0,
      child: AnimatedOpacity(
        opacity: _opacity,
        duration: const Duration(milliseconds: 250),
        child: Container(
            width: double.maxFinite,
            height: 40,
            alignment: Alignment.centerLeft,
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Color.fromRGBO(0, 0, 0, .7),
                  Color.fromRGBO(0, 0, 0, 0)
                ],
              ),
            ),
            child: Row(
              children: [
                _isFullScreen
                    ? IconButton(
                        padding: const EdgeInsets.fromLTRB(10, 0, 0, 0),
                        onPressed: () => VideoPlayerUtils.setPortrait(), // 切换竖屏
                        icon: const Icon(
                          Icons.arrow_back_ios,
                          color: Colors.white,
                        ),
                      )
                    : const SizedBox(
                        width: 15,
                      ),
                Container(
                  width: 340,
                  child: Text(
                    title,
                    style: TextStyle(color: Colors.white, fontSize: 15),
                    softWrap: true,
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
                const Spacer(),
              ],
            )),
      ),
    );
  }
}


////////////////////依赖文件///////////////////////


name: vocabulary
description: "music!~"

publish_to: 'none' # Remove this line if you wish to publish to pub.dev

version: 1.0.0+1

environment:
  sdk: '>=3.2.0 <4.0.0'

dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2
  custom_navigation_bar:
  ionicons: ^0.2.2
  marquee: ^2.2.3
  buttons_tabbar: ^1.3.6
  sqlite3: ^2.4.0
  provider:
  sqlite3_flutter_libs:
  shared_preferences:
  audioplayers: ^5.2.1
  path_provider:
  permission_handler:
  dio: ^5.4.1
  card_swiper:
  flutter_splash_screen: ^3.0.0
  video_player: ^2.2.11
  auto_orientation: ^2.2.1
  brightness_volume: ^1.0.3
  icons_launcher: ^2.1.7
  flutter_svg:
  oktoast: ^3.4.0
  flutter_slidable: ^3.0.1
  flutter_card_swiper: ^7.0.0
  extended_image: ^8.1.1
  record: ^4.4.4
  email_validator: ^2.1.16

dev_dependencies:
  floor_generator:
  build_runner:
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0

flutter:

  uses-material-design: true

  assets:
    - assets/music.png
    - assets/recMusic.sqlite
    - assets/images/
    - assets/app.png
    - assets/img.svg
    - assets/loading.gif
    - assets/music.gif
    - assets/10001.gif
    - assets/10002.gif
    - assets/mac.png
    - assets/card.png
    - assets/comment.png
    - assets/start.png

icons_launcher:
  image_path: "assets/start.png"
  platforms:
    android:
      enable: true